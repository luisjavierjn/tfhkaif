#define yyFlexLexer BixolonFlexLexer
#define yywrap Bixolonwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#define FLEX_DEBUG

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
static yyconst short int yy_accept[778] =
    {   0,
        0,    0,   41,   39,   40,   39,   39,   26,   39,   39,
       15,   39,   10,   18,   39,   39,   13,   29,   38,   39,
       39,   39,   39,   39,   39,   39,   14,   39,   28,   39,
       39,   39,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
        6,    0,    0,    0,   31,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,   25,    0,   13,
       32,   33,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,   13,    0,

        0,    0,    2,    0,    0,    7,    8,   30,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,   25,    0,   13,    0,    0,    0,    2,
        0,    0,    7,    8,   30,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,    0,    0,    0,    0,    9,
       25,    0,   13,    0,    0,    0,    2,    0,    0,    7,
        8,   30,    0,    0,    0,    0,    0,    0,   11,   16,
        0,    0,    0,    0,    0,    0,   25,    0,   13,    0,
        0,    0,    2,    0,    0,    7,    8,   30,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,

        0,   25,    0,   13,    0,    0,    0,    2,    3,    4,
        7,    8,   30,    0,    0,    0,    0,    0,    0,   11,
        0,    0,    0,    0,    0,    0,   25,    0,   13,    0,
        0,    1,    2,    7,    8,   30,    0,    0,    0,    0,
        0,    0,   11,    0,    0,    0,    0,    0,    0,   25,
        0,   13,    0,    0,    1,    2,    7,    8,   30,    0,
        0,    0,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,   25,    0,   13,    0,    0,    1,    2,    7,
        8,   30,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,   25,    0,   13,    0,    0,

        1,    2,    7,    8,   30,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,    0,    0,    0,   25,    0,
       13,    0,    0,    1,    2,    7,    8,   30,    0,    0,
        0,    0,    0,    0,   11,   21,    0,    0,    0,    0,
        0,   25,    0,   13,    0,    0,    1,    2,    7,    8,
       30,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,   20,   25,    0,   13,   34,   35,    1,    2,
        7,    8,   30,    0,    0,    0,    0,    0,   24,   11,
        0,    0,    0,    0,   25,   27,   13,    1,    2,    7,
        8,   30,    0,   36,   37,   36,    0,   11,    0,    0,

        0,    0,   25,   13,    1,    2,    7,    8,   30,    5,
        0,   11,    0,    0,    0,    0,   25,   13,    1,    2,
        7,    8,   30,    0,   11,    0,    0,   12,   12,   25,
       13,    1,    7,    8,   30,    0,   11,   17,    0,   12,
       12,   25,   13,    1,    7,    8,   30,   22,   11,   17,
       23,   12,   12,   25,   13,    1,    7,    8,   30,   22,
       11,   17,   23,   12,   12,   25,    1,    7,    8,   30,
       22,   11,   17,   23,   12,   12,   25,    1,    7,    8,
       30,   22,   11,   17,   23,   12,   12,   25,    1,    7,
        8,   30,   22,   11,   17,   23,   12,   12,   25,    1,

        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,

        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,    7,
        8,   30,   22,   17,   23,   12,   12,   30,   22,   17,

       23,   12,   12,   30,   22,   17,   23,   12,   12,   30,
       22,   17,   23,   12,   12,   30,   22,   17,   23,   12,
       12,   30,   22,   17,   23,   12,   12,   30,   22,   17,
       23,   12,   12,   30,   22,   17,   23,   12,   12,   30,
       22,   17,   23,   12,   12,   22,   17,   23,   12,   12,
       22,   17,   23,   12,   12,   22,   17,   23,   12,   12,
       22,   17,   23,   12,   12,   22,   17,   23,   17,   22,
       23,   17,   22,   23,   22,   23,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    5,    5,    6,    2,    2,    2,    2,
        2,    2,    7,    2,    7,    2,    2,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,    2,    2,    2,
        2,    6,    2,   18,   19,    2,   20,   21,   22,   23,
       24,   25,   26,    2,    2,    2,    2,   27,    2,   28,
        2,   29,   30,   31,    2,    2,    2,   32,    2,   33,
        2,    2,    2,    2,    2,    2,    2,    2,   34,   35,

        2,   36,    2,    2,   37,    2,   38,    2,    2,   34,
        2,   39,    2,   34,    2,   40,    2,    2,    2,    2,
       41,   34,    2,   42,    2,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       43,   43,   43,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   44,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    2,    2,    3,    3,    2,    2,    4,    5,    5,
        5,    6,    6,    6,    6,    6,    7,    2,    2,    8,
        2,    2,    8,    2,    2,    2,    8,    2,    8,    2,
        2,    2,    8,    8,    2,    8,    2,    2,    2,    2,
        2,    9,    1,    1
    } ;

static yyconst short int yy_base[1491] =
    {   0,
        0,    0,   91, 4776, 4776,    0,    0, 4776,    0,    0,
     4776,    0, 4776, 4776,   37,   39,    0, 4776, 4776,   41,
       62,   19,   47,    0,    0,    0, 4776,   47, 4776,    0,
        0,    0,    0,    0,    0,    0,    0,   56,    0,    0,
       34,   71,   64,    0,    0,    0,    0,   55,    0,   60,
     4776,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
     4776, 4776,    0,   72,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4776, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4776,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4776,    0,    0,    0, 4776, 4776,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4776,    0,
        0,    0,    0,    0,    0, 4776,    0,    0,    0,    0,
        0,    0,    0, 4776, 4776, 4776,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0, 4776,    0,    0,    0,    0, 4776,
     4776,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
        0, 4776,    0,    0, 4776, 4776, 4776,   99,  103,  107,
      111,  115,  121,  123,  130,  136,  140,  144,  148,  152,
      156,  160,  164,  168,  172,  176,  182,  188,  192,  196,

      200,  206,  212,  216,  220,  224,  228,  232,  236,  240,
      244,  248,  252,  256,  260,  264,  270,  276,  282,  288,
      292,  296,  300,  304,  307,  309,  314,  320,  324,  328,
      332,  336,  340,  346,  352,  356,  360,  364,  368,  372,
      376,  380,  386,  392,  398,  404,  408,  414,  420,  424,
      430,  438,  446,  452,  456,  460,  464,  468,  472,  478,
      484,  488,  492,  496,  500,  504,  508,  512,  518,  524,
      530,  536,  540,  544,  550,  556,  560,  566,  574,  582,
      588,  592,  596,  600,  604,  608,  614,  620,  624,  628,
      632,  636,  640,  644,  650,  656,  662,  668,  672,  676,

      682,  688,  692,  698,  706,  714,  720,  724,  728,  732,
      736,  740,  746,  752,  756,  760,  764,  768,  772,  778,
      784,  790,  796,  800,  804,  810,  816,  820,  826,  834,
      842,  848,  852,  856,  860,  864,  870,  876,  880,  884,
      888,  892,  896,  902,  908,  914,  920,  924,  928,  934,
      942,  950,  958,  964,  968,  972,  976,  980,  984,  990,
      996, 1000, 1004, 1008, 1012, 1016, 1022, 1028, 1034, 1040,
     1046, 1054, 1062, 1070, 1078, 1084, 1088, 1092, 1096, 1100,
     1104, 1110, 1116, 1120, 1124, 1128, 1132, 1136, 1142, 1148,
     1154, 1160, 1166, 1174, 1182, 1190, 1198, 1204, 1208, 1212,

     1216, 1220, 1224, 1230, 1236, 1240, 1244, 1248, 1252, 1256,
     1262, 1268, 1274, 1280, 1284, 1290, 1298, 1306, 1314, 1322,
     1328, 1332, 1336, 1340, 1344, 1348, 1354, 1360, 1364, 1368,
     1372, 1376, 1380, 1386, 1392, 1398, 1404, 1408, 1414, 1422,
     1430, 1438, 1446, 1452, 1456, 1460, 1464, 1468, 1474, 1480,
     1484, 1488, 1492, 1496, 1500, 1506, 1512, 1518, 1524, 1528,
     1534, 1542, 1550, 1558, 1566, 1572, 1576, 1580, 1584, 1588,
     1592, 1598, 1604, 1608, 1612, 1616, 1620, 1626, 1632, 1638,
     1644, 1648, 1654, 1662, 1670, 1678, 1686, 1692, 1696, 1700,
     1704, 1708, 1712, 1718, 1724, 1728, 1732, 1736, 1742, 1748,

     1754, 1762, 1770, 1778, 1786, 1794, 1800, 1804, 1808, 1812,
     1816, 1822, 1828, 1832, 1836, 1840, 1846, 1854, 1862, 1870,
     1878, 1886, 1894, 1900, 1904, 1910, 1916, 1920, 1924, 1928,
     1934, 1942, 1950, 1958, 1966, 1974, 1982, 1988, 1994, 2000,
     2004, 2008, 2012, 2018, 2026, 2034, 2042, 2050, 2058, 2064,
     2070, 2076, 2080, 2086, 2094, 2102, 2110, 2118, 2126, 2134,
     2142, 2148, 2154, 2162, 2168, 2174, 2182, 2190, 2198, 2206,
     2214, 2222, 2230, 2238, 2246, 2254, 2262, 2270, 2278, 2286,
     2294, 2302, 2310, 2318, 2326, 2334, 2342, 2350, 2358, 2366,
     2374, 2382, 2390, 2398, 2406, 2414, 2422, 2430, 2438, 2446,

     2454, 2462, 2470, 2478, 2486, 2494, 2502, 2510, 2518, 2526,
     2534, 2542, 2550, 2558, 2566, 2574, 2582, 2590, 2598, 2606,
     2614, 2622, 2630, 2638, 2646, 2654, 2662, 2670, 2678, 2686,
     2694, 2702, 2710, 2718, 2726, 2734, 2742, 2750, 2758, 2766,
     2774, 2782, 2790, 2798, 2806, 2814, 2822, 2830, 2838, 2846,
     2854, 2862, 2870, 2878, 2886, 2894, 2902, 2910, 2918, 2926,
     2934, 2942, 2950, 2958, 2966, 2974, 2982, 2990, 2998, 3006,
     3014, 3022, 3030, 3038, 3046, 3054, 3062, 3070, 3078, 3086,
     3094, 3102, 3110, 3118, 3126, 3134, 3142, 3150, 3158, 3166,
     3174, 3182, 3190, 3198, 3206, 3214, 3222, 3230, 3238, 3246,

     3254, 3262, 3270, 3278, 3286, 3294, 3302, 3310, 3318, 3326,
     3334, 3342, 3350, 3358, 3366, 3374, 3382, 3390, 3398, 3406,
     3414, 3422, 3430, 3438, 3446, 3454, 3462, 3470, 3478, 3486,
     3494, 3502, 3510, 3518, 3526, 3534, 3542, 3550, 3558, 3566,
     3574, 3582, 3590, 3598, 3606, 3614, 3622, 3630, 3638, 3646,
     3654, 3662, 3670, 3678, 3686, 3694, 3702, 3710, 3718, 3726,
     3734, 3742, 3750, 3758, 3766, 3774, 3782, 3790, 3798, 3806,
     3814, 3822, 3830, 3838, 3846, 3854, 3862, 3870, 3878, 3886,
     3894, 3902, 3910, 3918, 3926, 3934, 3942, 3950, 3958, 3966,
     3974, 3982, 3990, 3998, 4006, 4014, 4022, 4030, 4038, 4046,

     4054, 4062, 4070, 4078, 4086, 4094, 4102, 4110, 4118, 4126,
     4134, 4142, 4150, 4158, 4166, 4174, 4182, 4190, 4198, 4206,
     4214, 4222, 4230, 4238, 4246, 4254, 4262, 4270, 4278, 4286,
     4294, 4302, 4310, 4318, 4326, 4334, 4342, 4350, 4358, 4366,
     4374, 4382, 4390, 4398, 4406, 4414, 4422, 4430, 4438, 4446,
     4454, 4462, 4470, 4478, 4486, 4494, 4502, 4510, 4518, 4526,
     4534, 4542, 4550, 4558, 4566, 4574, 4582, 4590, 4598, 4606,
     4614, 4622, 4630, 4638, 4646, 4654, 4662, 4670, 4678, 4686,
     4694, 4702, 4710, 4718, 4726, 4734, 4742, 4750, 4758, 4766
    } ;

static yyconst short int yy_def[1491] =
    {   0,
      777,    1,  777,  777,  777,  778,  779,  777,  780,  781,
      777,  782,  777,  777,  777,  777,  783,  777,  777,  777,
      777,  784,  777,  785,  786,  787,  777,  777,  777,  788,
      789,  790,  791,  792,  793,  794,  795,  777,  796,  797,
      777,  777,  777,  798,  799,  800,  801,  777,  802,  777,
      777,  803,  804,  805,  777,  806,  807,  808,  809,  810,
      811,  812,  813,  814,  777,  815,  816,  817,  818,  819,
      777,  777,  820,  777,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,  835,  836,
      837,  838,  839,  840,  841,  842,  843,  844,  845,  846,

      777,  847,  848,  849,  850,  851,  852,  853,  854,  855,
      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      866,  867,  868,  869,  870,  871,  872,  873,  874,  875,
      876,  877,  878,  879,  880,  881,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  777,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  777,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  777,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,

      943,  944,  945,  946,  947,  948,  949,  950,  777,  777,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      777,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  989,
      990,  991,  992,  777,  993,  994,  995,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,

     1039, 1040, 1041, 1042, 1043,  777, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072,  777, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1098,  777, 1099, 1100, 1101,  777,  777, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,  777, 1112,
     1113, 1114, 1115, 1116, 1117,  777, 1118, 1119, 1120, 1121,
     1122, 1123, 1124,  777,  777,  777, 1125, 1126, 1127, 1128,

     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,  777,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,  777,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180,  777, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,  777,

     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
     1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
     1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
     1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,

     1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,  777,
     1404, 1405, 1406, 1407,  777, 1408, 1409, 1410, 1411,  777,
      777, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,

     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
     1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,  777,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483,  777, 1484, 1483, 1485, 1486, 1487,
     1488,  777, 1489, 1490,  777,  777,    0,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_nxt[4821] =
    {   0,
        4,    4,    5,    6,    7,    4,    4,    8,    9,   10,
       11,    4,   12,   13,   14,   15,   16,   17,    4,    4,
       18,   19,    4,    4,    4,   20,    4,   21,   22,   23,
        4,    4,    4,    4,   24,   25,   26,   27,   28,   29,
       30,    6,   31,   32,   38,   38,   39,   39,   41,  277,
       42,   43,   53,   59,   53,   55,   55,   55,   55,   55,
       54,   68,   79,   68,   68,   71,   72,   82,   82,   82,
      254,   80,  214,  214,  214,  329,  329,  329,  128,  101,
       39,   44,   74,   45,   46,   47,   48,   49,   59,   73,
      777,  777,   50,  777,  777,  777,  777,   68,  777,  777,

      777,   51,   33,   33,   33,   33,   34,   34,   34,   34,
       35,   35,   35,   35,   36,   36,   36,   36,   37,   37,
       37,   37,   40,   40,   40,   40,   40,   40,   40,   40,
       52,   52,   56,   56,   56,  777,  777,  777,   56,   57,
       57,   57,   57,   58,   58,   58,   58,   60,   60,   60,
       60,   61,   61,   61,   61,   62,   62,   62,   62,   63,
       63,   63,   63,   64,   64,   64,   64,   65,   65,   65,
       65,   66,   66,   66,   66,   67,   67,   67,   67,   69,
       69,   69,   69,   70,   70,   70,   70,   70,   70,   70,
       70,   75,   75,   75,   75,   76,   76,   76,   76,   77,

       77,   77,   77,   78,   78,   78,   78,   81,   81,   81,
       81,   81,   81,   81,   81,   83,   83,   83,   83,   84,
       84,   84,   84,   85,   85,   85,   85,   86,   86,   86,
       86,   87,   87,   87,   87,   88,   88,   88,   88,   89,
       89,   89,   89,   90,   90,   90,   90,   91,   91,   91,
       91,   92,   92,   92,   92,   93,   93,   93,   93,   94,
       94,   94,   94,   95,   95,   95,   95,   96,   96,   96,
       96,   97,   97,   97,   97,   97,   97,   97,   97,   98,
       98,   98,   98,   99,   99,   99,   99,   99,   99,   99,
       99,  100,  100,  100,  100,  102,  102,  102,  102,  103,

      103,  103,  103,  104,  104,  104,  104,  105,  105,  105,
      105,  106,  106,  107,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  109,  109,  109,  110,  110,  110,
      110,  111,  111,  111,  111,  112,  112,  112,  112,  113,
      113,  113,  113,  114,  114,  114,  114,  115,  115,  115,
      115,  115,  115,  115,  115,  116,  116,  116,  116,  117,
      117,  117,  117,  118,  118,  118,  118,  119,  119,  119,
      119,  120,  120,  120,  120,  121,  121,  121,  121,  122,
      122,  122,  122,  123,  123,  123,  123,  124,  124,  124,
      124,  124,  124,  124,  124,  125,  125,  125,  125,  126,

      126,  126,  126,  126,  126,  126,  126,  127,  127,  127,
      127,  129,  129,  129,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  131,  131,  131,  131,  132,  132,  132,
      132,  133,  133,  133,  133,  133,  133,  133,  133,  134,
      134,  134,  134,  134,  134,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  136,  136,  136,  136,  137,
      137,  137,  137,  138,  138,  138,  138,  139,  139,  139,
      139,  140,  140,  140,  140,  141,  141,  141,  141,  142,
      142,  142,  142,  142,  142,  142,  142,  143,  143,  143,
      143,  144,  144,  144,  144,  145,  145,  145,  145,  146,

      146,  146,  146,  147,  147,  147,  147,  148,  148,  148,
      148,  149,  149,  149,  149,  150,  150,  150,  150,  151,
      151,  151,  151,  151,  151,  151,  151,  152,  152,  152,
      152,  153,  153,  153,  153,  153,  153,  153,  153,  154,
      154,  154,  154,  155,  155,  155,  155,  156,  156,  156,
      156,  157,  157,  157,  157,  157,  157,  157,  157,  158,
      158,  158,  158,  159,  159,  159,  159,  160,  160,  160,
      160,  160,  160,  160,  160,  161,  161,  161,  161,  161,
      161,  161,  161,  162,  162,  162,  162,  162,  162,  162,
      162,  163,  163,  163,  163,  164,  164,  164,  164,  165,

      165,  165,  165,  166,  166,  166,  166,  167,  167,  167,
      167,  168,  168,  168,  168,  169,  169,  169,  169,  169,
      169,  169,  169,  170,  170,  170,  170,  171,  171,  171,
      171,  172,  172,  172,  172,  173,  173,  173,  173,  174,
      174,  174,  174,  175,  175,  175,  175,  176,  176,  176,
      176,  177,  177,  177,  177,  177,  177,  177,  177,  178,
      178,  178,  178,  179,  179,  179,  179,  179,  179,  179,
      179,  180,  180,  180,  180,  181,  181,  181,  181,  182,
      182,  182,  182,  183,  183,  183,  183,  183,  183,  183,
      183,  184,  184,  184,  184,  185,  185,  185,  185,  186,

      186,  186,  186,  186,  186,  186,  186,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,
      188,  188,  188,  189,  189,  189,  189,  190,  190,  190,
      190,  191,  191,  191,  191,  192,  192,  192,  192,  193,
      193,  193,  193,  194,  194,  194,  194,  195,  195,  195,
      195,  195,  195,  195,  195,  196,  196,  196,  196,  197,
      197,  197,  197,  198,  198,  198,  198,  199,  199,  199,
      199,  200,  200,  200,  200,  201,  201,  201,  201,  202,
      202,  202,  202,  202,  202,  202,  202,  203,  203,  203,
      203,  204,  204,  204,  204,  204,  204,  204,  204,  205,

      205,  205,  205,  206,  206,  206,  206,  207,  207,  207,
      207,  208,  208,  208,  208,  208,  208,  208,  208,  209,
      209,  209,  209,  210,  210,  210,  210,  211,  211,  211,
      211,  211,  211,  211,  211,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  215,  215,  215,  215,  216,  216,  216,  216,  217,
      217,  217,  217,  218,  218,  218,  218,  219,  219,  219,
      219,  220,  220,  220,  220,  220,  220,  220,  220,  221,
      221,  221,  221,  222,  222,  222,  222,  223,  223,  223,
      223,  224,  224,  224,  224,  225,  225,  225,  225,  226,

      226,  226,  226,  227,  227,  227,  227,  227,  227,  227,
      227,  228,  228,  228,  228,  229,  229,  229,  229,  229,
      229,  229,  229,  230,  230,  230,  230,  231,  231,  231,
      231,  232,  232,  232,  232,  233,  233,  233,  233,  233,
      233,  233,  233,  234,  234,  234,  234,  234,  234,  234,
      234,  235,  235,  235,  235,  235,  235,  235,  235,  236,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
      237,  238,  238,  238,  238,  239,  239,  239,  239,  240,
      240,  240,  240,  241,  241,  241,  241,  242,  242,  242,
      242,  243,  243,  243,  243,  243,  243,  243,  243,  244,

      244,  244,  244,  245,  245,  245,  245,  246,  246,  246,
      246,  247,  247,  247,  247,  248,  248,  248,  248,  249,
      249,  249,  249,  250,  250,  250,  250,  250,  250,  250,
      250,  251,  251,  251,  251,  252,  252,  252,  252,  252,
      252,  252,  252,  253,  253,  253,  253,  255,  255,  255,
      255,  255,  255,  255,  255,  256,  256,  256,  256,  256,
      256,  256,  256,  257,  257,  257,  257,  257,  257,  257,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  259,
      259,  259,  259,  259,  259,  259,  259,  260,  260,  260,
      260,  261,  261,  261,  261,  262,  262,  262,  262,  263,

      263,  263,  263,  264,  264,  264,  264,  265,  265,  265,
      265,  266,  266,  266,  266,  266,  266,  266,  266,  267,
      267,  267,  267,  268,  268,  268,  268,  269,  269,  269,
      269,  270,  270,  270,  270,  271,  271,  271,  271,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  273,
      273,  274,  274,  274,  274,  275,  275,  275,  275,  275,
      275,  275,  275,  276,  276,  276,  276,  278,  278,  278,
      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  280,  280,  280,  280,  280,  280,  280,
      280,  281,  281,  281,  281,  281,  281,  281,  281,  282,

      282,  282,  282,  282,  282,  282,  282,  283,  283,  283,
      283,  284,  284,  284,  284,  285,  285,  285,  285,  286,
      286,  286,  286,  287,  287,  287,  287,  288,  288,  288,
      288,  289,  289,  289,  289,  289,  289,  289,  289,  290,
      290,  290,  290,  291,  291,  291,  291,  292,  292,  292,
      292,  293,  293,  293,  293,  294,  294,  294,  294,  295,
      295,  295,  295,  296,  296,  296,  296,  296,  296,  296,
      296,  297,  297,  297,  297,  298,  298,  298,  298,  298,
      298,  298,  298,  299,  299,  299,  299,  300,  300,  300,
      300,  301,  301,  301,  301,  301,  301,  301,  301,  302,

      302,  302,  302,  302,  302,  302,  302,  303,  303,  303,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  307,  307,  307,  307,  308,
      308,  308,  308,  309,  309,  309,  309,  310,  310,  310,
      310,  311,  311,  311,  311,  312,  312,  312,  312,  312,
      312,  312,  312,  313,  313,  313,  313,  314,  314,  314,
      314,  315,  315,  315,  315,  316,  316,  316,  316,  317,
      317,  317,  317,  318,  318,  318,  318,  319,  319,  319,
      319,  319,  319,  319,  319,  320,  320,  320,  320,  321,

      321,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  323,  323,  323,  323,  324,  324,  324,  324,  324,
      324,  324,  324,  325,  325,  325,  325,  325,  325,  325,
      325,  326,  326,  326,  326,  326,  326,  326,  326,  327,
      327,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  330,  330,  330,  330,  331,
      331,  331,  331,  332,  332,  332,  332,  333,  333,  333,
      333,  334,  334,  334,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  336,  336,  336,  336,  337,  337,  337,
      337,  338,  338,  338,  338,  339,  339,  339,  339,  340,

      340,  340,  340,  341,  341,  341,  341,  342,  342,  342,
      342,  342,  342,  342,  342,  343,  343,  343,  343,  344,
      344,  344,  344,  344,  344,  344,  344,  345,  345,  345,
      345,  346,  346,  346,  346,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  349,  349,  349,  349,  350,
      350,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  351,  351,  351,  351,  352,  352,  352,  352,  353,
      353,  353,  353,  354,  354,  354,  354,  355,  355,  355,
      355,  356,  356,  356,  356,  357,  357,  357,  357,  358,

      358,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  360,  360,  360,  360,  361,  361,  361,  361,  362,
      362,  362,  362,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  364,  364,  364,  365,  365,  365,  365,  366,
      366,  366,  366,  366,  366,  366,  366,  367,  367,  367,
      367,  368,  368,  368,  368,  369,  369,  369,  369,  369,
      369,  369,  369,  370,  370,  370,  370,  370,  370,  370,
      370,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  373,  373,
      373,  373,  373,  373,  373,  374,  374,  374,  374,  375,

      375,  375,  375,  376,  376,  376,  376,  377,  377,  377,
      377,  378,  378,  378,  378,  379,  379,  379,  379,  380,
      380,  380,  380,  380,  380,  380,  380,  381,  381,  381,
      381,  382,  382,  382,  382,  383,  383,  383,  383,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      385,  386,  386,  386,  386,  387,  387,  387,  387,  387,
      387,  387,  387,  388,  388,  388,  388,  388,  388,  388,
      388,  389,  389,  389,  389,  389,  389,  389,  389,  390,
      390,  390,  390,  390,  390,  390,  390,  391,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  392,  392,

      392,  392,  392,  393,  393,  393,  393,  394,  394,  394,
      394,  395,  395,  395,  395,  396,  396,  396,  396,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  399,  399,  399,  399,  400,  400,  400,  400,  401,
      401,  401,  401,  402,  402,  402,  402,  403,  403,  403,
      403,  403,  403,  403,  403,  404,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  406,  406,  406,  406,  406,  406,  406,  406,  407,
      407,  407,  407,  407,  407,  407,  407,  408,  408,  408,
      408,  408,  408,  408,  408,  409,  409,  409,  409,  409,

      409,  409,  409,  410,  410,  410,  410,  411,  411,  411,
      411,  412,  412,  412,  412,  412,  412,  412,  412,  413,
      413,  413,  413,  414,  414,  414,  414,  415,  415,  415,
      415,  416,  416,  416,  416,  417,  417,  417,  417,  417,
      417,  417,  417,  418,  418,  418,  418,  418,  418,  418,
      418,  419,  419,  419,  419,  419,  419,  419,  419,  420,
      420,  420,  420,  420,  420,  420,  420,  421,  421,  421,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  423,  423,
      423,  424,  424,  424,  424,  425,  425,  425,  425,  425,

      425,  425,  425,  426,  426,  426,  426,  427,  427,  427,
      427,  428,  428,  428,  428,  429,  429,  429,  429,  430,
      430,  430,  430,  430,  430,  430,  430,  431,  431,  431,
      431,  431,  431,  431,  431,  432,  432,  432,  432,  432,
      432,  432,  432,  433,  433,  433,  433,  433,  433,  433,
      433,  434,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,  435,  435,  435,  435,  435,  436,  436,  436,
      436,  437,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  438,  438,  439,  439,  439,  439,  440,  440,  440,
      440,  440,  440,  440,  440,  441,  441,  441,  441,  441,

      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  443,  443,  443,  444,
      444,  444,  444,  444,  444,  444,  444,  445,  445,  445,
      445,  445,  445,  445,  445,  446,  446,  446,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  452,  452,  452,  452,  452,
      452,  452,  452,  453,  453,  453,  453,  453,  453,  453,
      453,  454,  454,  454,  454,  454,  454,  454,  454,  455,

      455,  455,  455,  455,  455,  455,  455,  456,  456,  456,
      456,  456,  456,  456,  456,  457,  457,  457,  457,  457,
      457,  457,  457,  458,  458,  458,  458,  458,  458,  458,
      458,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  460,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,
      462,  462,  462,  463,  463,  463,  463,  463,  463,  463,
      463,  464,  464,  464,  464,  464,  464,  464,  464,  465,
      465,  465,  465,  465,  465,  465,  465,  466,  466,  466,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,

      467,  467,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  470,
      470,  470,  470,  470,  470,  470,  470,  471,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  472,  473,  473,  473,  473,  473,  473,  473,
      473,  474,  474,  474,  474,  474,  474,  474,  474,  475,
      475,  475,  475,  475,  475,  475,  475,  476,  476,  476,
      476,  476,  476,  476,  476,  477,  477,  477,  477,  477,
      477,  477,  477,  478,  478,  478,  478,  478,  478,  478,
      478,  479,  479,  479,  479,  479,  479,  479,  479,  480,

      480,  480,  480,  480,  480,  480,  480,  481,  481,  481,
      481,  481,  481,  481,  481,  482,  482,  482,  482,  482,
      482,  482,  482,  483,  483,  483,  483,  483,  483,  483,
      483,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  486,  486,
      486,  486,  486,  486,  486,  487,  487,  487,  487,  487,
      487,  487,  487,  488,  488,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,

      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,
      493,  494,  494,  494,  494,  494,  494,  494,  494,  495,
      495,  495,  495,  495,  495,  495,  495,  496,  496,  496,
      496,  496,  496,  496,  496,  497,  497,  497,  497,  497,
      497,  497,  497,  498,  498,  498,  498,  498,  498,  498,
      498,  499,  499,  499,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  502,  502,  502,  502,  502,
      502,  502,  502,  503,  503,  503,  503,  503,  503,  503,
      503,  504,  504,  504,  504,  504,  504,  504,  504,  505,

      505,  505,  505,  505,  505,  505,  505,  506,  506,  506,
      506,  506,  506,  506,  506,  507,  507,  507,  507,  507,
      507,  507,  507,  508,  508,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  510,
      510,  510,  510,  510,  510,  510,  510,  511,  511,  511,
      511,  511,  511,  511,  511,  512,  512,  512,  512,  512,
      512,  512,  512,  513,  513,  513,  513,  513,  513,  513,
      513,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  515,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,

      517,  517,  517,  518,  518,  518,  518,  518,  518,  518,
      518,  519,  519,  519,  519,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  521,  521,  521,
      521,  521,  521,  521,  521,  522,  522,  522,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  524,  524,  524,  524,  524,  524,  524,  524,  525,
      525,  525,  525,  525,  525,  525,  525,  526,  526,  526,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  527,  528,  528,  528,  528,  528,  528,  528,
      528,  529,  529,  529,  529,  529,  529,  529,  529,  530,

      530,  530,  530,  530,  530,  530,  530,  531,  531,  531,
      531,  531,  531,  531,  531,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  533,  533,  533,  533,  533,  533,
      533,  534,  534,  534,  534,  534,  534,  534,  534,  535,
      535,  535,  535,  535,  535,  535,  535,  536,  536,  536,
      536,  536,  536,  536,  536,  537,  537,  537,  537,  537,
      537,  537,  537,  538,  538,  538,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  540,  540,  540,  541,  541,  541,
      541,  541,  541,  541,  541,  542,  542,  542,  542,  542,

      542,  542,  542,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  545,
      545,  545,  545,  545,  545,  545,  545,  546,  546,  546,
      546,  546,  546,  546,  546,  547,  547,  547,  547,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  548,  548,
      548,  549,  549,  549,  549,  549,  549,  549,  549,  550,
      550,  550,  550,  550,  550,  550,  550,  551,  551,  551,
      551,  551,  551,  551,  551,  552,  552,  552,  552,  552,
      552,  552,  552,  553,  553,  553,  553,  553,  553,  553,
      553,  554,  554,  554,  554,  554,  554,  554,  554,  555,

      555,  555,  555,  555,  555,  555,  555,  556,  556,  556,
      556,  556,  556,  556,  556,  557,  557,  557,  557,  557,
      557,  557,  557,  558,  558,  558,  558,  558,  558,  558,
      558,  559,  559,  559,  559,  559,  559,  559,  559,  560,
      560,  560,  560,  560,  560,  560,  560,  561,  561,  561,
      561,  561,  561,  561,  561,  562,  562,  562,  562,  562,
      562,  562,  562,  563,  563,  563,  563,  563,  563,  563,
      563,  564,  564,  564,  564,  564,  564,  564,  564,  565,
      565,  565,  565,  565,  565,  565,  565,  566,  566,  566,
      566,  566,  566,  566,  566,  567,  567,  567,  567,  567,

      567,  567,  567,  568,  568,  568,  568,  568,  568,  568,
      568,  569,  569,  569,  569,  569,  569,  569,  569,  570,
      570,  570,  570,  570,  570,  570,  570,  571,  571,  571,
      571,  571,  571,  571,  571,  572,  572,  572,  572,  572,
      572,  572,  572,  573,  573,  573,  573,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  574,  574,  574,  575,
      575,  575,  575,  575,  575,  575,  575,  576,  576,  576,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,
      577,  577,  577,  578,  578,  578,  578,  578,  578,  578,
      578,  579,  579,  579,  579,  579,  579,  579,  579,  580,

      580,  580,  580,  580,  580,  580,  580,  581,  581,  581,
      581,  581,  581,  581,  581,  582,  582,  582,  582,  582,
      582,  582,  582,  583,  583,  583,  583,  583,  583,  583,
      583,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      585,  585,  585,  585,  585,  585,  585,  586,  586,  586,
      586,  586,  586,  586,  586,  587,  587,  587,  587,  587,
      587,  587,  587,  588,  588,  588,  588,  588,  588,  588,
      588,  589,  589,  589,  589,  589,  589,  589,  589,  590,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591,  591,  592,  592,  592,  592,  592,

      592,  592,  592,  593,  593,  593,  593,  593,  593,  593,
      593,  594,  594,  594,  594,  594,  594,  594,  594,  595,
      595,  595,  595,  595,  595,  595,  595,  596,  596,  596,
      596,  596,  596,  596,  596,  597,  597,  597,  597,  597,
      597,  597,  597,  598,  598,  598,  598,  598,  598,  598,
      598,  599,  599,  599,  599,  599,  599,  599,  599,  600,
      600,  600,  600,  600,  600,  600,  600,  601,  601,  601,
      601,  601,  601,  601,  601,  602,  602,  602,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  604,  604,  604,  604,  604,  604,  604,  604,  605,

      605,  605,  605,  605,  605,  605,  605,  606,  606,  606,
      606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  609,  609,  609,  609,  609,  609,  609,  609,  610,
      610,  610,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  612,  613,  613,  613,  613,  613,  613,  613,
      613,  614,  614,  614,  614,  614,  614,  614,  614,  615,
      615,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  616,  616,  616,  617,  617,  617,  617,  617,

      617,  617,  617,  618,  618,  618,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  619,  619,  619,  620,
      620,  620,  620,  620,  620,  620,  620,  621,  621,  621,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      622,  622,  622,  623,  623,  623,  623,  623,  623,  623,
      623,  624,  624,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  628,  628,  628,  628,  628,  628,
      628,  629,  629,  629,  629,  629,  629,  629,  629,  630,

      630,  630,  630,  630,  630,  630,  630,  631,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,
      632,  632,  632,  633,  633,  633,  633,  633,  633,  633,
      633,  634,  634,  634,  634,  634,  634,  634,  634,  635,
      635,  635,  635,  635,  635,  635,  635,  636,  636,  636,
      636,  636,  636,  636,  636,  637,  637,  637,  637,  637,
      637,  637,  637,  638,  638,  638,  638,  638,  638,  638,
      638,  639,  639,  639,  639,  639,  639,  639,  639,  640,
      640,  640,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  641,  641,  641,  641,  642,  642,  642,  642,  642,

      642,  642,  642,  643,  643,  643,  643,  643,  643,  643,
      643,  644,  644,  644,  644,  644,  644,  644,  644,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  647,  647,  647,  647,  647,
      647,  647,  647,  648,  648,  648,  648,  648,  648,  648,
      648,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  652,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  654,  654,  654,  655,

      655,  655,  655,  655,  655,  655,  655,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  663,  663,  663,  663,  663,  663,  663,
      663,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      665,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  666,  666,  666,  667,  667,  667,  667,  667,

      667,  667,  667,  668,  668,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669,  669,  670,
      670,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672,  672,  673,  673,  673,  673,  673,  673,  673,
      673,  674,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  675,  675,  675,  675,  676,  676,  676,
      676,  676,  676,  676,  676,  677,  677,  677,  677,  677,
      677,  677,  677,  678,  678,  678,  678,  678,  678,  678,
      678,  679,  679,  679,  679,  679,  679,  679,  679,  680,

      680,  680,  680,  680,  680,  680,  680,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  684,  684,  684,  684,  684,  684,  684,  684,  685,
      685,  685,  685,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  686,  686,  686,  687,  687,  687,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  691,  691,  691,  692,  692,  692,  692,  692,

      692,  692,  692,  693,  693,  693,  693,  693,  693,  693,
      693,  694,  694,  694,  694,  694,  694,  694,  694,  695,
      695,  695,  695,  695,  695,  695,  695,  696,  696,  696,
      696,  696,  696,  696,  696,  697,  697,  697,  697,  697,
      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  699,  699,  699,  700,
      700,  700,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701,  701,  702,  702,  702,  702,  702,
      702,  702,  702,  703,  703,  703,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  704,  705,

      705,  705,  705,  705,  705,  705,  705,  706,  706,  706,
      706,  706,  706,  706,  706,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  708,  708,  708,  708,  708,  708,
      708,  709,  709,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  713,  713,  713,  713,  713,  713,  713,
      713,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      715,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  717,  717,  717,  717,  717,

      717,  717,  717,  718,  718,  718,  718,  718,  718,  718,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  720,
      720,  720,  720,  720,  720,  720,  720,  721,  721,  721,
      721,  721,  721,  721,  721,  722,  722,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
      723,  724,  724,  724,  724,  724,  724,  724,  724,  725,
      725,  725,  725,  725,  725,  725,  725,  726,  726,  726,
      726,  726,  726,  726,  726,  727,  727,  727,  727,  727,
      727,  727,  727,  728,  728,  728,  728,  728,  728,  728,
      728,  729,  729,  729,  729,  729,  729,  729,  729,  730,

      730,  730,  730,  730,  730,  730,  730,  731,  731,  731,
      731,  731,  731,  731,  731,  732,  732,  732,  732,  732,
      732,  732,  732,  733,  733,  733,  733,  733,  733,  733,
      733,  734,  734,  734,  734,  734,  734,  734,  734,  735,
      735,  735,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  736,  736,  736,  737,  737,  737,  737,  737,
      737,  737,  737,  738,  738,  738,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  739,  739,  739,  740,
      740,  740,  740,  740,  740,  740,  740,  741,  741,  741,
      741,  741,  741,  741,  741,  742,  742,  742,  742,  742,

      742,  742,  742,  743,  743,  743,  743,  743,  743,  743,
      743,  744,  744,  744,  744,  744,  744,  744,  744,  745,
      745,  745,  745,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  746,  746,  746,  747,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
      748,  749,  749,  749,  749,  749,  749,  749,  749,  750,
      750,  750,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  754,  754,  755,

      755,  755,  755,  755,  755,  755,  755,  756,  756,  756,
      756,  756,  756,  756,  756,  757,  757,  757,  757,  757,
      757,  757,  757,  758,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  760,
      760,  760,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  764,  764,  764,  765,
      765,  765,  765,  765,  765,  765,  765,  766,  766,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,

      767,  767,  767,  768,  768,  768,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  769,  769,  769,  769,  770,
      770,  770,  770,  770,  770,  770,  770,  771,  771,  771,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  773,  773,  773,  773,  773,
      773,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  776,    3,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_chk[4821] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   15,   15,   16,   16,   20,  254,
       20,   20,   22,   28,   22,   23,   23,   23,   23,   23,
       22,   38,   48,   38,   38,   41,   41,   50,   50,   50,
      231,   48,  189,  189,  189,  306,  306,  306,  101,   74,
       16,   21,   43,   21,   21,   21,   21,   21,   28,   42,
        3,    0,   21,    0,    0,    0,    0,   38,    0,    0,

        0,   21,  778,  778,  778,  778,  779,  779,  779,  779,
      780,  780,  780,  780,  781,  781,  781,  781,  782,  782,
      782,  782,  783,  783,  783,  783,  783,  783,  783,  783,
      784,  784,  785,  785,  785,    0,    0,    0,  785,  786,
      786,  786,  786,  787,  787,  787,  787,  788,  788,  788,
      788,  789,  789,  789,  789,  790,  790,  790,  790,  791,
      791,  791,  791,  792,  792,  792,  792,  793,  793,  793,
      793,  794,  794,  794,  794,  795,  795,  795,  795,  796,
      796,  796,  796,  797,  797,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  799,  799,  799,  799,  800,

      800,  800,  800,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  802,  802,  802,  803,  803,  803,  803,  804,
      804,  804,  804,  805,  805,  805,  805,  806,  806,  806,
      806,  807,  807,  807,  807,  808,  808,  808,  808,  809,
      809,  809,  809,  810,  810,  810,  810,  811,  811,  811,
      811,  812,  812,  812,  812,  813,  813,  813,  813,  814,
      814,  814,  814,  815,  815,  815,  815,  816,  816,  816,
      816,  817,  817,  817,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  821,  821,  821,  821,  822,

      822,  822,  822,  823,  823,  823,  823,  824,  824,  824,
      824,  825,  825,  826,  826,  827,  827,  827,  827,  827,
      827,  827,  827,  828,  828,  828,  828,  829,  829,  829,
      829,  830,  830,  830,  830,  831,  831,  831,  831,  832,
      832,  832,  832,  833,  833,  833,  833,  834,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  836,
      836,  836,  836,  837,  837,  837,  837,  838,  838,  838,
      838,  839,  839,  839,  839,  840,  840,  840,  840,  841,
      841,  841,  841,  842,  842,  842,  842,  843,  843,  843,
      843,  843,  843,  843,  843,  844,  844,  844,  844,  845,

      845,  845,  845,  845,  845,  845,  845,  846,  846,  846,
      846,  847,  847,  847,  847,  848,  848,  848,  848,  848,
      848,  848,  848,  849,  849,  849,  849,  850,  850,  850,
      850,  851,  851,  851,  851,  851,  851,  851,  851,  852,
      852,  852,  852,  852,  852,  852,  852,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  855,
      855,  855,  855,  856,  856,  856,  856,  857,  857,  857,
      857,  858,  858,  858,  858,  859,  859,  859,  859,  860,
      860,  860,  860,  860,  860,  860,  860,  861,  861,  861,
      861,  862,  862,  862,  862,  863,  863,  863,  863,  864,

      864,  864,  864,  865,  865,  865,  865,  866,  866,  866,
      866,  867,  867,  867,  867,  868,  868,  868,  868,  869,
      869,  869,  869,  869,  869,  869,  869,  870,  870,  870,
      870,  871,  871,  871,  871,  871,  871,  871,  871,  872,
      872,  872,  872,  873,  873,  873,  873,  874,  874,  874,
      874,  875,  875,  875,  875,  875,  875,  875,  875,  876,
      876,  876,  876,  877,  877,  877,  877,  878,  878,  878,
      878,  878,  878,  878,  878,  879,  879,  879,  879,  879,
      879,  879,  879,  880,  880,  880,  880,  880,  880,  880,
      880,  881,  881,  881,  881,  882,  882,  882,  882,  883,

      883,  883,  883,  884,  884,  884,  884,  885,  885,  885,
      885,  886,  886,  886,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  888,  888,  888,  888,  889,  889,  889,
      889,  890,  890,  890,  890,  891,  891,  891,  891,  892,
      892,  892,  892,  893,  893,  893,  893,  894,  894,  894,
      894,  895,  895,  895,  895,  895,  895,  895,  895,  896,
      896,  896,  896,  897,  897,  897,  897,  897,  897,  897,
      897,  898,  898,  898,  898,  899,  899,  899,  899,  900,
      900,  900,  900,  901,  901,  901,  901,  901,  901,  901,
      901,  902,  902,  902,  902,  903,  903,  903,  903,  904,

      904,  904,  904,  904,  904,  904,  904,  905,  905,  905,
      905,  905,  905,  905,  905,  906,  906,  906,  906,  906,
      906,  906,  906,  907,  907,  907,  907,  908,  908,  908,
      908,  909,  909,  909,  909,  910,  910,  910,  910,  911,
      911,  911,  911,  912,  912,  912,  912,  913,  913,  913,
      913,  913,  913,  913,  913,  914,  914,  914,  914,  915,
      915,  915,  915,  916,  916,  916,  916,  917,  917,  917,
      917,  918,  918,  918,  918,  919,  919,  919,  919,  920,
      920,  920,  920,  920,  920,  920,  920,  921,  921,  921,
      921,  922,  922,  922,  922,  922,  922,  922,  922,  923,

      923,  923,  923,  924,  924,  924,  924,  925,  925,  925,
      925,  926,  926,  926,  926,  926,  926,  926,  926,  927,
      927,  927,  927,  928,  928,  928,  928,  929,  929,  929,
      929,  929,  929,  929,  929,  930,  930,  930,  930,  930,
      930,  930,  930,  931,  931,  931,  931,  931,  931,  931,
      931,  932,  932,  932,  932,  933,  933,  933,  933,  934,
      934,  934,  934,  935,  935,  935,  935,  936,  936,  936,
      936,  937,  937,  937,  937,  937,  937,  937,  937,  938,
      938,  938,  938,  939,  939,  939,  939,  940,  940,  940,
      940,  941,  941,  941,  941,  942,  942,  942,  942,  943,

      943,  943,  943,  944,  944,  944,  944,  944,  944,  944,
      944,  945,  945,  945,  945,  946,  946,  946,  946,  946,
      946,  946,  946,  947,  947,  947,  947,  948,  948,  948,
      948,  949,  949,  949,  949,  950,  950,  950,  950,  950,
      950,  950,  950,  951,  951,  951,  951,  951,  951,  951,
      951,  952,  952,  952,  952,  952,  952,  952,  952,  953,
      953,  953,  953,  953,  953,  953,  953,  954,  954,  954,
      954,  955,  955,  955,  955,  956,  956,  956,  956,  957,
      957,  957,  957,  958,  958,  958,  958,  959,  959,  959,
      959,  960,  960,  960,  960,  960,  960,  960,  960,  961,

      961,  961,  961,  962,  962,  962,  962,  963,  963,  963,
      963,  964,  964,  964,  964,  965,  965,  965,  965,  966,
      966,  966,  966,  967,  967,  967,  967,  967,  967,  967,
      967,  968,  968,  968,  968,  969,  969,  969,  969,  969,
      969,  969,  969,  970,  970,  970,  970,  971,  971,  971,
      971,  971,  971,  971,  971,  972,  972,  972,  972,  972,
      972,  972,  972,  973,  973,  973,  973,  973,  973,  973,
      973,  974,  974,  974,  974,  974,  974,  974,  974,  975,
      975,  975,  975,  975,  975,  975,  975,  976,  976,  976,
      976,  977,  977,  977,  977,  978,  978,  978,  978,  979,

      979,  979,  979,  980,  980,  980,  980,  981,  981,  981,
      981,  982,  982,  982,  982,  982,  982,  982,  982,  983,
      983,  983,  983,  984,  984,  984,  984,  985,  985,  985,
      985,  986,  986,  986,  986,  987,  987,  987,  987,  988,
      988,  988,  988,  989,  989,  989,  989,  989,  989,  989,
      989,  990,  990,  990,  990,  991,  991,  991,  991,  991,
      991,  991,  991,  992,  992,  992,  992,  993,  993,  993,
      993,  993,  993,  993,  993,  994,  994,  994,  994,  994,
      994,  994,  994,  995,  995,  995,  995,  995,  995,  995,
      995,  996,  996,  996,  996,  996,  996,  996,  996,  997,

      997,  997,  997,  997,  997,  997,  997,  998,  998,  998,
      998,  999,  999,  999,  999, 1000, 1000, 1000, 1000, 1001,
     1001, 1001, 1001, 1002, 1002, 1002, 1002, 1003, 1003, 1003,
     1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005, 1005, 1005, 1006, 1006, 1006, 1006, 1007, 1007, 1007,
     1007, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009, 1010,
     1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1012, 1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1014, 1014, 1014, 1014, 1015, 1015, 1015,
     1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017,

     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1023,
     1023, 1023, 1023, 1024, 1024, 1024, 1024, 1025, 1025, 1025,
     1025, 1026, 1026, 1026, 1026, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1028, 1028, 1028, 1028, 1029, 1029, 1029,
     1029, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1032,
     1032, 1032, 1032, 1033, 1033, 1033, 1033, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1036,

     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037,
     1037, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1045,
     1045, 1045, 1045, 1046, 1046, 1046, 1046, 1047, 1047, 1047,
     1047, 1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1050, 1050, 1050, 1050, 1051, 1051, 1051,
     1051, 1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1054,

     1054, 1054, 1054, 1055, 1055, 1055, 1055, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059, 1059, 1059,
     1059, 1060, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1067,
     1067, 1067, 1067, 1068, 1068, 1068, 1068, 1069, 1069, 1069,
     1069, 1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
     1073, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1076,
     1076, 1076, 1076, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081, 1081,
     1081, 1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1088, 1089,

     1089, 1089, 1089, 1090, 1090, 1090, 1090, 1091, 1091, 1091,
     1091, 1092, 1092, 1092, 1092, 1093, 1093, 1093, 1093, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1095, 1095, 1095,
     1095, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1098,
     1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1107, 1107, 1107, 1107, 1108, 1108, 1108,
     1108, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1110, 1111,
     1111, 1111, 1111, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1113, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1115,
     1115, 1115, 1115, 1116, 1116, 1116, 1116, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123, 1123,

     1123, 1123, 1123, 1124, 1124, 1124, 1124, 1125, 1125, 1125,
     1125, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127,
     1127, 1127, 1127, 1128, 1128, 1128, 1128, 1129, 1129, 1129,
     1129, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1140, 1140, 1140, 1140, 1141, 1141, 1141,
     1141, 1142, 1142, 1142, 1142, 1143, 1143, 1143, 1143, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150,
     1150, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1152,
     1152, 1152, 1152, 1153, 1153, 1153, 1153, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,

     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231,

     1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1269,

     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,

     1281, 1281, 1281, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319,

     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331,

     1331, 1331, 1331, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344,

     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381, 1381, 1381,

     1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394,

     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406,

     1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444,

     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456,

     1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469,

     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481,

     1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_rule_linenum[40] =
    {   0,
       94,  104,  112,  120,  128,  136,  144,  152,  161,  169,
      177,  185,  193,  201,  209,  217,  225,  233,  241,  249,
      257,  265,  275,  283,  291,  299,  307,  315,  323,  332,
      340,  349,  357,  365,  373,  381,  389,  397,  406
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "protocol.l"
#define INITIAL 0
/* scanner for a toy Pascal-like language */
#line 4 "protocol.l"
/* need this for the call to atof() below */
#include "StdAfx.h"
#include <stdio.h>
#include <math.h>
#include "protocol.h"
#include "bixolon.h"
#include "state_machines.h"

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

char* bxtext;
long* bxleng;
char* qprint;
long* qpleng;
Quorion::Bixolon bix;
//Quorion::Printer *cmds;
Quorion::SM_Inicial *smStart;

/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
#define YY_NO_UNPUT 1
#line 1835 "lex.Bixolon.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 92 "protocol.l"


#line 1965 "lex.Bixolon.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 778 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 777 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 40 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 40 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 94 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfDatosDelCajero(yytext, qprint);
			
			smStart->Check(Quorion::TKN_CONF_DATOS_DEL_CAJERO,yytext,yyleng);		
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 104 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfNombresFormasDePagos(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_NOMBRES_FORMAS_DE_PAGO,yytext,yyleng);	
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 112 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfHora(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_HORA,yytext,yyleng);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfFecha(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_FECHA,yytext,yyleng);
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 128 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfDelIVA(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_DEL_IVA,yytext,yyleng);	
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfDelIVAMemoriaFiscal(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_DEL_IVA_MEMORIA_FISCAL,yytext,yyleng);	
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 144 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfEncabezado(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_ENCABEZADO,yytext,yyleng);	
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 152 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfPieDeFactura(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_PIE_DE_FACTURA,yytext,yyleng);	
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 161 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.CajeroInicio(yytext, qprint);
			smStart->Check(Quorion::TKN_CAJERO_INICIO,yytext,yyleng);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 169 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.CajeroFin(yytext, qprint);
			smStart->Check(Quorion::TKN_CAJERO_FIN,yytext,yyleng);
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 177 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DatosDelCliente(yytext, qprint);
			smStart->Check(Quorion::TKN_DATOS_CLIENTE,yytext,yyleng);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 185 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactRegistroDeProducto(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_REGISTRO_PRODUCTO,yytext,yyleng);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 193 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactDescripcionDeProducto(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_DESCRIPCION_PRODUCTO,yytext,yyleng);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 201 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactCorreccion(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_CORRECCION,yytext,yyleng);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 209 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactSubtotal(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_SUBTOTAL,yytext,yyleng);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 217 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactRecargoODescuento(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_RECARGO_O_DESCUENTO,yytext,yyleng);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 225 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactAnulacionITEM(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_ANULACION_ITEM,yytext,yyleng);
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 233 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactAnulacionFactura(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_ANULACION_FACTURA,yytext,yyleng);
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 241 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactPagoDirecto(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_PAGO_DIRECTO,yytext,yyleng);
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 249 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactPagoParcial(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_PAGO_PARCIAL,yytext,yyleng);
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 257 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactCodigoDeBarra(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_CODIGO_DE_BARRA,yytext,yyleng);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 265 "protocol.l"
{			
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			/* Se coloco los caracteres [!|"|#| ] ya que el sistema adm. 
			   VALERY lo utiliza como comando para identificar el tipo de tasa del producto
			*/
			*qpleng = bix.NCRegistroProducto(yytext, qprint);
			smStart->Check(Quorion::TKN_NC_REGISTRO_PRODUCTO,yytext,yyleng);
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 275 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.NCAnulacionITEM(yytext, qprint);
			smStart->Check(Quorion::TKN_NC_ANULACION_ITEM,yytext,yyleng);
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 283 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.NCCierreDevolucion(yytext, qprint);
			smStart->Check(Quorion::TKN_NC_CIERRE_DEVOLUCION,yytext,yyleng);
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 291 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//						
			*qpleng = bix.DNFTexto(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_TEXTO,yytext,yyleng);
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 299 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNFAperturaGaveta(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_APERTURA_GAVETA,yytext,yyleng);
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 307 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNF_PO_RA(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_PO_RA,yytext,yyleng);
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 315 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNFFinalizarPORA(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_FINALIZAR_PO_RA,yytext,yyleng);
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 323 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNFPrintValorConf(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_PRINT_VALOR_CONF,yytext,yyleng);
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 332 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DisplayMensaje(yytext, qprint);
			smStart->Check(Quorion::TKN_DISPLAY_MENSAJE,yytext,yyleng);
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 340 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.Status(yytext, qprint);
			smStart->Check(Quorion::TKN_STATUS,yytext,yyleng);
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 349 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteX(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_X,yytext,yyleng);
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 357 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteZ(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_Z,yytext,yyleng);
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 365 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteMFiscalFecha(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_MFISCAL_FECHA,yytext,yyleng);
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 373 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteMFiscalNumero(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_MFISCAL_NUMERO,yytext,yyleng);
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 381 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReimpresionDeDocPorNumero(yytext, qprint);
			smStart->Check(Quorion::TKN_REIMPRESION_DOC_POR_NUMERO,yytext,yyleng);
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 389 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReimpresionDeDocPorFecha(yytext, qprint);
			smStart->Check(Quorion::TKN_REIMPRESION_DOC_POR_FECHA,yytext,yyleng);
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 397 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.PrintEdoMemoriaAuditoria(yytext, qprint);
			smStart->Check(Quorion::TKN_PRINT_EDO_MEMORIA_AUDITORIA,yytext,yyleng);
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 406 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//						
			printf( "Caracter No Reconocido: %s\n", yytext );
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 413 "protocol.l"
ECHO;
	YY_BREAK
#line 2494 "lex.Bixolon.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 778 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 778 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 777);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 413 "protocol.l"


int Bixolonwrap()
{	
	return 1;
}

namespace Quorion {

	Protocol::Protocol(Printer *sm_print,::istream* in,
				::ostream* out)
			: BixolonFlexLexer(in, out)
	{
		//cmds = sm_print;
		//_printer = cmds;
		_printer = sm_print;
		smStart = new Quorion::SM_Inicial(sm_print);
		_smStart = smStart;

		_bxtext = (char*)malloc(1024*sizeof(char));
		memset(_bxtext, 0, 1024);
		bxtext = _bxtext;

		bxleng = &_bxleng;
		_bxleng = 0;

		_qprint = (char*)malloc(1024*sizeof(char));
		memset(_qprint, 0, 1024);
		qprint = _qprint;

		qpleng = &_qpleng;
		_qpleng = 0;
		//printf("Protocol\n");
	}

	Protocol::~Protocol()
	{
		free(_bxtext);
		free(_qprint);
		free(_smStart);
		//printf("free Protocol\n");
	}

	void Protocol::set_debug(bool b)
	{
		yy_flex_debug = b;
	}

	char* Protocol::YYText()
	{
		return _bxtext;
	}

	long Protocol::YYLeng()
	{
		return _bxleng;
	}

	char* Protocol::QPrint()
	{
		return _qprint;
	}

	long Protocol::QPLeng()
	{
		return _qpleng;
	}

	int Protocol::yywrap()
	{
		return 1;
	}

	int Protocol::QError()
	{
		return _printer->fncGetQError();
	}

	int Protocol::BStatus()
	{
		return _printer->fncGetBStatus();
	}
}
/*
int main(int argc, char** argv)
{	
	//++argv, --argc;  // skip over program name
	//if ( argc > 0 )
	//	yyin = fopen( argv[0], "r" );
	//else
	//	yyin = stdin;     
	//yylex();
	
	//yyFlexLexer Lexer;
	//Lexer.yylex();
	return 0;
}
*/
#define yyFlexLexer BixolonFlexLexer
#define yywrap Bixolonwrap

#line 5 "protocol.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#define FLEX_DEBUG

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
static yyconst short int yy_accept[778] =
    {   0,
        0,    0,   41,   39,   40,   39,   39,   26,   39,   39,
       15,   39,   10,   18,   39,   39,   13,   29,   38,   39,
       39,   39,   39,   39,   39,   39,   14,   39,   28,   39,
       39,   39,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
        6,    0,    0,    0,   31,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,   25,    0,   13,
       32,   33,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,   13,    0,

        0,    0,    2,    0,    0,    7,    8,   30,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,   25,    0,   13,    0,    0,    0,    2,
        0,    0,    7,    8,   30,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,    0,    0,    0,    0,    9,
       25,    0,   13,    0,    0,    0,    2,    0,    0,    7,
        8,   30,    0,    0,    0,    0,    0,    0,   11,   16,
        0,    0,    0,    0,    0,    0,   25,    0,   13,    0,
        0,    0,    2,    0,    0,    7,    8,   30,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,

        0,   25,    0,   13,    0,    0,    0,    2,    3,    4,
        7,    8,   30,    0,    0,    0,    0,    0,    0,   11,
        0,    0,    0,    0,    0,    0,   25,    0,   13,    0,
        0,    1,    2,    7,    8,   30,    0,    0,    0,    0,
        0,    0,   11,    0,    0,    0,    0,    0,    0,   25,
        0,   13,    0,    0,    1,    2,    7,    8,   30,    0,
        0,    0,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,   25,    0,   13,    0,    0,    1,    2,    7,
        8,   30,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,   25,    0,   13,    0,    0,

        1,    2,    7,    8,   30,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,    0,    0,    0,   25,    0,
       13,    0,    0,    1,    2,    7,    8,   30,    0,    0,
        0,    0,    0,    0,   11,   21,    0,    0,    0,    0,
        0,   25,    0,   13,    0,    0,    1,    2,    7,    8,
       30,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,   20,   25,    0,   13,   34,   35,    1,    2,
        7,    8,   30,    0,    0,    0,    0,    0,   24,   11,
        0,    0,    0,    0,   25,   27,   13,    1,    2,    7,
        8,   30,    0,   36,   37,   36,    0,   11,    0,    0,

        0,    0,   25,   13,    1,    2,    7,    8,   30,    5,
        0,   11,    0,    0,    0,    0,   25,   13,    1,    2,
        7,    8,   30,    0,   11,    0,    0,   12,   12,   25,
       13,    1,    7,    8,   30,    0,   11,   17,    0,   12,
       12,   25,   13,    1,    7,    8,   30,   22,   11,   17,
       23,   12,   12,   25,   13,    1,    7,    8,   30,   22,
       11,   17,   23,   12,   12,   25,    1,    7,    8,   30,
       22,   11,   17,   23,   12,   12,   25,    1,    7,    8,
       30,   22,   11,   17,   23,   12,   12,   25,    1,    7,
        8,   30,   22,   11,   17,   23,   12,   12,   25,    1,

        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,

        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,   25,
        7,    8,   30,   22,   11,   17,   23,   12,   12,    7,
        8,   30,   22,   17,   23,   12,   12,   30,   22,   17,

       23,   12,   12,   30,   22,   17,   23,   12,   12,   30,
       22,   17,   23,   12,   12,   30,   22,   17,   23,   12,
       12,   30,   22,   17,   23,   12,   12,   30,   22,   17,
       23,   12,   12,   30,   22,   17,   23,   12,   12,   30,
       22,   17,   23,   12,   12,   22,   17,   23,   12,   12,
       22,   17,   23,   12,   12,   22,   17,   23,   12,   12,
       22,   17,   23,   12,   12,   22,   17,   23,   17,   22,
       23,   17,   22,   23,   22,   23,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    5,    5,    6,    2,    2,    2,    2,
        2,    2,    7,    2,    7,    2,    2,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,    2,    2,    2,
        2,    6,    2,   18,   19,    2,   20,   21,   22,   23,
       24,   25,   26,    2,    2,    2,    2,   27,    2,   28,
        2,   29,   30,   31,    2,    2,    2,   32,    2,   33,
        2,    2,    2,    2,    2,    2,    2,    2,   34,   35,

        2,   36,    2,    2,   37,    2,   38,    2,    2,   34,
        2,   39,    2,   34,    2,   40,    2,    2,    2,    2,
       41,   34,    2,   42,    2,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       43,   43,   43,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   44,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    2,    2,    3,    3,    2,    2,    4,    5,    5,
        5,    6,    6,    6,    6,    6,    7,    2,    2,    8,
        2,    2,    8,    2,    2,    2,    8,    2,    8,    2,
        2,    2,    8,    8,    2,    8,    2,    2,    2,    2,
        2,    9,    1,    1
    } ;

static yyconst short int yy_base[1491] =
    {   0,
        0,    0,   91, 4776, 4776,    0,    0, 4776,    0,    0,
     4776,    0, 4776, 4776,   37,   39,    0, 4776, 4776,   41,
       62,   19,   47,    0,    0,    0, 4776,   47, 4776,    0,
        0,    0,    0,    0,    0,    0,    0,   56,    0,    0,
       34,   71,   64,    0,    0,    0,    0,   55,    0,   60,
     4776,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
     4776, 4776,    0,   72,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4776, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4776,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4776,    0,    0,    0, 4776, 4776,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4776,    0,
        0,    0,    0,    0,    0, 4776,    0,    0,    0,    0,
        0,    0,    0, 4776, 4776, 4776,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0, 4776,    0,    0,    0,    0, 4776,
     4776,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4776,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4776,    0,    0,    0,    0,    0,
        0, 4776,    0,    0, 4776, 4776, 4776,   99,  103,  107,
      111,  115,  121,  123,  130,  136,  140,  144,  148,  152,
      156,  160,  164,  168,  172,  176,  182,  188,  192,  196,

      200,  206,  212,  216,  220,  224,  228,  232,  236,  240,
      244,  248,  252,  256,  260,  264,  270,  276,  282,  288,
      292,  296,  300,  304,  307,  309,  314,  320,  324,  328,
      332,  336,  340,  346,  352,  356,  360,  364,  368,  372,
      376,  380,  386,  392,  398,  404,  408,  414,  420,  424,
      430,  438,  446,  452,  456,  460,  464,  468,  472,  478,
      484,  488,  492,  496,  500,  504,  508,  512,  518,  524,
      530,  536,  540,  544,  550,  556,  560,  566,  574,  582,
      588,  592,  596,  600,  604,  608,  614,  620,  624,  628,
      632,  636,  640,  644,  650,  656,  662,  668,  672,  676,

      682,  688,  692,  698,  706,  714,  720,  724,  728,  732,
      736,  740,  746,  752,  756,  760,  764,  768,  772,  778,
      784,  790,  796,  800,  804,  810,  816,  820,  826,  834,
      842,  848,  852,  856,  860,  864,  870,  876,  880,  884,
      888,  892,  896,  902,  908,  914,  920,  924,  928,  934,
      942,  950,  958,  964,  968,  972,  976,  980,  984,  990,
      996, 1000, 1004, 1008, 1012, 1016, 1022, 1028, 1034, 1040,
     1046, 1054, 1062, 1070, 1078, 1084, 1088, 1092, 1096, 1100,
     1104, 1110, 1116, 1120, 1124, 1128, 1132, 1136, 1142, 1148,
     1154, 1160, 1166, 1174, 1182, 1190, 1198, 1204, 1208, 1212,

     1216, 1220, 1224, 1230, 1236, 1240, 1244, 1248, 1252, 1256,
     1262, 1268, 1274, 1280, 1284, 1290, 1298, 1306, 1314, 1322,
     1328, 1332, 1336, 1340, 1344, 1348, 1354, 1360, 1364, 1368,
     1372, 1376, 1380, 1386, 1392, 1398, 1404, 1408, 1414, 1422,
     1430, 1438, 1446, 1452, 1456, 1460, 1464, 1468, 1474, 1480,
     1484, 1488, 1492, 1496, 1500, 1506, 1512, 1518, 1524, 1528,
     1534, 1542, 1550, 1558, 1566, 1572, 1576, 1580, 1584, 1588,
     1592, 1598, 1604, 1608, 1612, 1616, 1620, 1626, 1632, 1638,
     1644, 1648, 1654, 1662, 1670, 1678, 1686, 1692, 1696, 1700,
     1704, 1708, 1712, 1718, 1724, 1728, 1732, 1736, 1742, 1748,

     1754, 1762, 1770, 1778, 1786, 1794, 1800, 1804, 1808, 1812,
     1816, 1822, 1828, 1832, 1836, 1840, 1846, 1854, 1862, 1870,
     1878, 1886, 1894, 1900, 1904, 1910, 1916, 1920, 1924, 1928,
     1934, 1942, 1950, 1958, 1966, 1974, 1982, 1988, 1994, 2000,
     2004, 2008, 2012, 2018, 2026, 2034, 2042, 2050, 2058, 2064,
     2070, 2076, 2080, 2086, 2094, 2102, 2110, 2118, 2126, 2134,
     2142, 2148, 2154, 2162, 2168, 2174, 2182, 2190, 2198, 2206,
     2214, 2222, 2230, 2238, 2246, 2254, 2262, 2270, 2278, 2286,
     2294, 2302, 2310, 2318, 2326, 2334, 2342, 2350, 2358, 2366,
     2374, 2382, 2390, 2398, 2406, 2414, 2422, 2430, 2438, 2446,

     2454, 2462, 2470, 2478, 2486, 2494, 2502, 2510, 2518, 2526,
     2534, 2542, 2550, 2558, 2566, 2574, 2582, 2590, 2598, 2606,
     2614, 2622, 2630, 2638, 2646, 2654, 2662, 2670, 2678, 2686,
     2694, 2702, 2710, 2718, 2726, 2734, 2742, 2750, 2758, 2766,
     2774, 2782, 2790, 2798, 2806, 2814, 2822, 2830, 2838, 2846,
     2854, 2862, 2870, 2878, 2886, 2894, 2902, 2910, 2918, 2926,
     2934, 2942, 2950, 2958, 2966, 2974, 2982, 2990, 2998, 3006,
     3014, 3022, 3030, 3038, 3046, 3054, 3062, 3070, 3078, 3086,
     3094, 3102, 3110, 3118, 3126, 3134, 3142, 3150, 3158, 3166,
     3174, 3182, 3190, 3198, 3206, 3214, 3222, 3230, 3238, 3246,

     3254, 3262, 3270, 3278, 3286, 3294, 3302, 3310, 3318, 3326,
     3334, 3342, 3350, 3358, 3366, 3374, 3382, 3390, 3398, 3406,
     3414, 3422, 3430, 3438, 3446, 3454, 3462, 3470, 3478, 3486,
     3494, 3502, 3510, 3518, 3526, 3534, 3542, 3550, 3558, 3566,
     3574, 3582, 3590, 3598, 3606, 3614, 3622, 3630, 3638, 3646,
     3654, 3662, 3670, 3678, 3686, 3694, 3702, 3710, 3718, 3726,
     3734, 3742, 3750, 3758, 3766, 3774, 3782, 3790, 3798, 3806,
     3814, 3822, 3830, 3838, 3846, 3854, 3862, 3870, 3878, 3886,
     3894, 3902, 3910, 3918, 3926, 3934, 3942, 3950, 3958, 3966,
     3974, 3982, 3990, 3998, 4006, 4014, 4022, 4030, 4038, 4046,

     4054, 4062, 4070, 4078, 4086, 4094, 4102, 4110, 4118, 4126,
     4134, 4142, 4150, 4158, 4166, 4174, 4182, 4190, 4198, 4206,
     4214, 4222, 4230, 4238, 4246, 4254, 4262, 4270, 4278, 4286,
     4294, 4302, 4310, 4318, 4326, 4334, 4342, 4350, 4358, 4366,
     4374, 4382, 4390, 4398, 4406, 4414, 4422, 4430, 4438, 4446,
     4454, 4462, 4470, 4478, 4486, 4494, 4502, 4510, 4518, 4526,
     4534, 4542, 4550, 4558, 4566, 4574, 4582, 4590, 4598, 4606,
     4614, 4622, 4630, 4638, 4646, 4654, 4662, 4670, 4678, 4686,
     4694, 4702, 4710, 4718, 4726, 4734, 4742, 4750, 4758, 4766
    } ;

static yyconst short int yy_def[1491] =
    {   0,
      777,    1,  777,  777,  777,  778,  779,  777,  780,  781,
      777,  782,  777,  777,  777,  777,  783,  777,  777,  777,
      777,  784,  777,  785,  786,  787,  777,  777,  777,  788,
      789,  790,  791,  792,  793,  794,  795,  777,  796,  797,
      777,  777,  777,  798,  799,  800,  801,  777,  802,  777,
      777,  803,  804,  805,  777,  806,  807,  808,  809,  810,
      811,  812,  813,  814,  777,  815,  816,  817,  818,  819,
      777,  777,  820,  777,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,  835,  836,
      837,  838,  839,  840,  841,  842,  843,  844,  845,  846,

      777,  847,  848,  849,  850,  851,  852,  853,  854,  855,
      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      866,  867,  868,  869,  870,  871,  872,  873,  874,  875,
      876,  877,  878,  879,  880,  881,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  777,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  777,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  777,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,

      943,  944,  945,  946,  947,  948,  949,  950,  777,  777,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      777,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  989,
      990,  991,  992,  777,  993,  994,  995,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,

     1039, 1040, 1041, 1042, 1043,  777, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072,  777, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1098,  777, 1099, 1100, 1101,  777,  777, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,  777, 1112,
     1113, 1114, 1115, 1116, 1117,  777, 1118, 1119, 1120, 1121,
     1122, 1123, 1124,  777,  777,  777, 1125, 1126, 1127, 1128,

     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,  777,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,  777,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180,  777, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,  777,

     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
     1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
     1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
     1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,

     1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,  777,
     1404, 1405, 1406, 1407,  777, 1408, 1409, 1410, 1411,  777,
      777, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,

     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
     1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,  777,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483,  777, 1484, 1483, 1485, 1486, 1487,
     1488,  777, 1489, 1490,  777,  777,    0,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_nxt[4821] =
    {   0,
        4,    4,    5,    6,    7,    4,    4,    8,    9,   10,
       11,    4,   12,   13,   14,   15,   16,   17,    4,    4,
       18,   19,    4,    4,    4,   20,    4,   21,   22,   23,
        4,    4,    4,    4,   24,   25,   26,   27,   28,   29,
       30,    6,   31,   32,   38,   38,   39,   39,   41,  277,
       42,   43,   53,   59,   53,   55,   55,   55,   55,   55,
       54,   68,   79,   68,   68,   71,   72,   82,   82,   82,
      254,   80,  214,  214,  214,  329,  329,  329,  128,  101,
       39,   44,   74,   45,   46,   47,   48,   49,   59,   73,
      777,  777,   50,  777,  777,  777,  777,   68,  777,  777,

      777,   51,   33,   33,   33,   33,   34,   34,   34,   34,
       35,   35,   35,   35,   36,   36,   36,   36,   37,   37,
       37,   37,   40,   40,   40,   40,   40,   40,   40,   40,
       52,   52,   56,   56,   56,  777,  777,  777,   56,   57,
       57,   57,   57,   58,   58,   58,   58,   60,   60,   60,
       60,   61,   61,   61,   61,   62,   62,   62,   62,   63,
       63,   63,   63,   64,   64,   64,   64,   65,   65,   65,
       65,   66,   66,   66,   66,   67,   67,   67,   67,   69,
       69,   69,   69,   70,   70,   70,   70,   70,   70,   70,
       70,   75,   75,   75,   75,   76,   76,   76,   76,   77,

       77,   77,   77,   78,   78,   78,   78,   81,   81,   81,
       81,   81,   81,   81,   81,   83,   83,   83,   83,   84,
       84,   84,   84,   85,   85,   85,   85,   86,   86,   86,
       86,   87,   87,   87,   87,   88,   88,   88,   88,   89,
       89,   89,   89,   90,   90,   90,   90,   91,   91,   91,
       91,   92,   92,   92,   92,   93,   93,   93,   93,   94,
       94,   94,   94,   95,   95,   95,   95,   96,   96,   96,
       96,   97,   97,   97,   97,   97,   97,   97,   97,   98,
       98,   98,   98,   99,   99,   99,   99,   99,   99,   99,
       99,  100,  100,  100,  100,  102,  102,  102,  102,  103,

      103,  103,  103,  104,  104,  104,  104,  105,  105,  105,
      105,  106,  106,  107,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  109,  109,  109,  110,  110,  110,
      110,  111,  111,  111,  111,  112,  112,  112,  112,  113,
      113,  113,  113,  114,  114,  114,  114,  115,  115,  115,
      115,  115,  115,  115,  115,  116,  116,  116,  116,  117,
      117,  117,  117,  118,  118,  118,  118,  119,  119,  119,
      119,  120,  120,  120,  120,  121,  121,  121,  121,  122,
      122,  122,  122,  123,  123,  123,  123,  124,  124,  124,
      124,  124,  124,  124,  124,  125,  125,  125,  125,  126,

      126,  126,  126,  126,  126,  126,  126,  127,  127,  127,
      127,  129,  129,  129,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  131,  131,  131,  131,  132,  132,  132,
      132,  133,  133,  133,  133,  133,  133,  133,  133,  134,
      134,  134,  134,  134,  134,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  136,  136,  136,  136,  137,
      137,  137,  137,  138,  138,  138,  138,  139,  139,  139,
      139,  140,  140,  140,  140,  141,  141,  141,  141,  142,
      142,  142,  142,  142,  142,  142,  142,  143,  143,  143,
      143,  144,  144,  144,  144,  145,  145,  145,  145,  146,

      146,  146,  146,  147,  147,  147,  147,  148,  148,  148,
      148,  149,  149,  149,  149,  150,  150,  150,  150,  151,
      151,  151,  151,  151,  151,  151,  151,  152,  152,  152,
      152,  153,  153,  153,  153,  153,  153,  153,  153,  154,
      154,  154,  154,  155,  155,  155,  155,  156,  156,  156,
      156,  157,  157,  157,  157,  157,  157,  157,  157,  158,
      158,  158,  158,  159,  159,  159,  159,  160,  160,  160,
      160,  160,  160,  160,  160,  161,  161,  161,  161,  161,
      161,  161,  161,  162,  162,  162,  162,  162,  162,  162,
      162,  163,  163,  163,  163,  164,  164,  164,  164,  165,

      165,  165,  165,  166,  166,  166,  166,  167,  167,  167,
      167,  168,  168,  168,  168,  169,  169,  169,  169,  169,
      169,  169,  169,  170,  170,  170,  170,  171,  171,  171,
      171,  172,  172,  172,  172,  173,  173,  173,  173,  174,
      174,  174,  174,  175,  175,  175,  175,  176,  176,  176,
      176,  177,  177,  177,  177,  177,  177,  177,  177,  178,
      178,  178,  178,  179,  179,  179,  179,  179,  179,  179,
      179,  180,  180,  180,  180,  181,  181,  181,  181,  182,
      182,  182,  182,  183,  183,  183,  183,  183,  183,  183,
      183,  184,  184,  184,  184,  185,  185,  185,  185,  186,

      186,  186,  186,  186,  186,  186,  186,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,
      188,  188,  188,  189,  189,  189,  189,  190,  190,  190,
      190,  191,  191,  191,  191,  192,  192,  192,  192,  193,
      193,  193,  193,  194,  194,  194,  194,  195,  195,  195,
      195,  195,  195,  195,  195,  196,  196,  196,  196,  197,
      197,  197,  197,  198,  198,  198,  198,  199,  199,  199,
      199,  200,  200,  200,  200,  201,  201,  201,  201,  202,
      202,  202,  202,  202,  202,  202,  202,  203,  203,  203,
      203,  204,  204,  204,  204,  204,  204,  204,  204,  205,

      205,  205,  205,  206,  206,  206,  206,  207,  207,  207,
      207,  208,  208,  208,  208,  208,  208,  208,  208,  209,
      209,  209,  209,  210,  210,  210,  210,  211,  211,  211,
      211,  211,  211,  211,  211,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  215,  215,  215,  215,  216,  216,  216,  216,  217,
      217,  217,  217,  218,  218,  218,  218,  219,  219,  219,
      219,  220,  220,  220,  220,  220,  220,  220,  220,  221,
      221,  221,  221,  222,  222,  222,  222,  223,  223,  223,
      223,  224,  224,  224,  224,  225,  225,  225,  225,  226,

      226,  226,  226,  227,  227,  227,  227,  227,  227,  227,
      227,  228,  228,  228,  228,  229,  229,  229,  229,  229,
      229,  229,  229,  230,  230,  230,  230,  231,  231,  231,
      231,  232,  232,  232,  232,  233,  233,  233,  233,  233,
      233,  233,  233,  234,  234,  234,  234,  234,  234,  234,
      234,  235,  235,  235,  235,  235,  235,  235,  235,  236,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
      237,  238,  238,  238,  238,  239,  239,  239,  239,  240,
      240,  240,  240,  241,  241,  241,  241,  242,  242,  242,
      242,  243,  243,  243,  243,  243,  243,  243,  243,  244,

      244,  244,  244,  245,  245,  245,  245,  246,  246,  246,
      246,  247,  247,  247,  247,  248,  248,  248,  248,  249,
      249,  249,  249,  250,  250,  250,  250,  250,  250,  250,
      250,  251,  251,  251,  251,  252,  252,  252,  252,  252,
      252,  252,  252,  253,  253,  253,  253,  255,  255,  255,
      255,  255,  255,  255,  255,  256,  256,  256,  256,  256,
      256,  256,  256,  257,  257,  257,  257,  257,  257,  257,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  259,
      259,  259,  259,  259,  259,  259,  259,  260,  260,  260,
      260,  261,  261,  261,  261,  262,  262,  262,  262,  263,

      263,  263,  263,  264,  264,  264,  264,  265,  265,  265,
      265,  266,  266,  266,  266,  266,  266,  266,  266,  267,
      267,  267,  267,  268,  268,  268,  268,  269,  269,  269,
      269,  270,  270,  270,  270,  271,  271,  271,  271,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  273,
      273,  274,  274,  274,  274,  275,  275,  275,  275,  275,
      275,  275,  275,  276,  276,  276,  276,  278,  278,  278,
      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  280,  280,  280,  280,  280,  280,  280,
      280,  281,  281,  281,  281,  281,  281,  281,  281,  282,

      282,  282,  282,  282,  282,  282,  282,  283,  283,  283,
      283,  284,  284,  284,  284,  285,  285,  285,  285,  286,
      286,  286,  286,  287,  287,  287,  287,  288,  288,  288,
      288,  289,  289,  289,  289,  289,  289,  289,  289,  290,
      290,  290,  290,  291,  291,  291,  291,  292,  292,  292,
      292,  293,  293,  293,  293,  294,  294,  294,  294,  295,
      295,  295,  295,  296,  296,  296,  296,  296,  296,  296,
      296,  297,  297,  297,  297,  298,  298,  298,  298,  298,
      298,  298,  298,  299,  299,  299,  299,  300,  300,  300,
      300,  301,  301,  301,  301,  301,  301,  301,  301,  302,

      302,  302,  302,  302,  302,  302,  302,  303,  303,  303,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  307,  307,  307,  307,  308,
      308,  308,  308,  309,  309,  309,  309,  310,  310,  310,
      310,  311,  311,  311,  311,  312,  312,  312,  312,  312,
      312,  312,  312,  313,  313,  313,  313,  314,  314,  314,
      314,  315,  315,  315,  315,  316,  316,  316,  316,  317,
      317,  317,  317,  318,  318,  318,  318,  319,  319,  319,
      319,  319,  319,  319,  319,  320,  320,  320,  320,  321,

      321,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  323,  323,  323,  323,  324,  324,  324,  324,  324,
      324,  324,  324,  325,  325,  325,  325,  325,  325,  325,
      325,  326,  326,  326,  326,  326,  326,  326,  326,  327,
      327,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  330,  330,  330,  330,  331,
      331,  331,  331,  332,  332,  332,  332,  333,  333,  333,
      333,  334,  334,  334,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  336,  336,  336,  336,  337,  337,  337,
      337,  338,  338,  338,  338,  339,  339,  339,  339,  340,

      340,  340,  340,  341,  341,  341,  341,  342,  342,  342,
      342,  342,  342,  342,  342,  343,  343,  343,  343,  344,
      344,  344,  344,  344,  344,  344,  344,  345,  345,  345,
      345,  346,  346,  346,  346,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  349,  349,  349,  349,  350,
      350,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  351,  351,  351,  351,  352,  352,  352,  352,  353,
      353,  353,  353,  354,  354,  354,  354,  355,  355,  355,
      355,  356,  356,  356,  356,  357,  357,  357,  357,  358,

      358,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  360,  360,  360,  360,  361,  361,  361,  361,  362,
      362,  362,  362,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  364,  364,  364,  365,  365,  365,  365,  366,
      366,  366,  366,  366,  366,  366,  366,  367,  367,  367,
      367,  368,  368,  368,  368,  369,  369,  369,  369,  369,
      369,  369,  369,  370,  370,  370,  370,  370,  370,  370,
      370,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  373,  373,
      373,  373,  373,  373,  373,  374,  374,  374,  374,  375,

      375,  375,  375,  376,  376,  376,  376,  377,  377,  377,
      377,  378,  378,  378,  378,  379,  379,  379,  379,  380,
      380,  380,  380,  380,  380,  380,  380,  381,  381,  381,
      381,  382,  382,  382,  382,  383,  383,  383,  383,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      385,  386,  386,  386,  386,  387,  387,  387,  387,  387,
      387,  387,  387,  388,  388,  388,  388,  388,  388,  388,
      388,  389,  389,  389,  389,  389,  389,  389,  389,  390,
      390,  390,  390,  390,  390,  390,  390,  391,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  392,  392,

      392,  392,  392,  393,  393,  393,  393,  394,  394,  394,
      394,  395,  395,  395,  395,  396,  396,  396,  396,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  399,  399,  399,  399,  400,  400,  400,  400,  401,
      401,  401,  401,  402,  402,  402,  402,  403,  403,  403,
      403,  403,  403,  403,  403,  404,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  406,  406,  406,  406,  406,  406,  406,  406,  407,
      407,  407,  407,  407,  407,  407,  407,  408,  408,  408,
      408,  408,  408,  408,  408,  409,  409,  409,  409,  409,

      409,  409,  409,  410,  410,  410,  410,  411,  411,  411,
      411,  412,  412,  412,  412,  412,  412,  412,  412,  413,
      413,  413,  413,  414,  414,  414,  414,  415,  415,  415,
      415,  416,  416,  416,  416,  417,  417,  417,  417,  417,
      417,  417,  417,  418,  418,  418,  418,  418,  418,  418,
      418,  419,  419,  419,  419,  419,  419,  419,  419,  420,
      420,  420,  420,  420,  420,  420,  420,  421,  421,  421,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  423,  423,
      423,  424,  424,  424,  424,  425,  425,  425,  425,  425,

      425,  425,  425,  426,  426,  426,  426,  427,  427,  427,
      427,  428,  428,  428,  428,  429,  429,  429,  429,  430,
      430,  430,  430,  430,  430,  430,  430,  431,  431,  431,
      431,  431,  431,  431,  431,  432,  432,  432,  432,  432,
      432,  432,  432,  433,  433,  433,  433,  433,  433,  433,
      433,  434,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,  435,  435,  435,  435,  435,  436,  436,  436,
      436,  437,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  438,  438,  439,  439,  439,  439,  440,  440,  440,
      440,  440,  440,  440,  440,  441,  441,  441,  441,  441,

      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  443,  443,  443,  444,
      444,  444,  444,  444,  444,  444,  444,  445,  445,  445,
      445,  445,  445,  445,  445,  446,  446,  446,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  452,  452,  452,  452,  452,
      452,  452,  452,  453,  453,  453,  453,  453,  453,  453,
      453,  454,  454,  454,  454,  454,  454,  454,  454,  455,

      455,  455,  455,  455,  455,  455,  455,  456,  456,  456,
      456,  456,  456,  456,  456,  457,  457,  457,  457,  457,
      457,  457,  457,  458,  458,  458,  458,  458,  458,  458,
      458,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  460,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,
      462,  462,  462,  463,  463,  463,  463,  463,  463,  463,
      463,  464,  464,  464,  464,  464,  464,  464,  464,  465,
      465,  465,  465,  465,  465,  465,  465,  466,  466,  466,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,

      467,  467,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  470,
      470,  470,  470,  470,  470,  470,  470,  471,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  472,  473,  473,  473,  473,  473,  473,  473,
      473,  474,  474,  474,  474,  474,  474,  474,  474,  475,
      475,  475,  475,  475,  475,  475,  475,  476,  476,  476,
      476,  476,  476,  476,  476,  477,  477,  477,  477,  477,
      477,  477,  477,  478,  478,  478,  478,  478,  478,  478,
      478,  479,  479,  479,  479,  479,  479,  479,  479,  480,

      480,  480,  480,  480,  480,  480,  480,  481,  481,  481,
      481,  481,  481,  481,  481,  482,  482,  482,  482,  482,
      482,  482,  482,  483,  483,  483,  483,  483,  483,  483,
      483,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  486,  486,
      486,  486,  486,  486,  486,  487,  487,  487,  487,  487,
      487,  487,  487,  488,  488,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,

      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,
      493,  494,  494,  494,  494,  494,  494,  494,  494,  495,
      495,  495,  495,  495,  495,  495,  495,  496,  496,  496,
      496,  496,  496,  496,  496,  497,  497,  497,  497,  497,
      497,  497,  497,  498,  498,  498,  498,  498,  498,  498,
      498,  499,  499,  499,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  502,  502,  502,  502,  502,
      502,  502,  502,  503,  503,  503,  503,  503,  503,  503,
      503,  504,  504,  504,  504,  504,  504,  504,  504,  505,

      505,  505,  505,  505,  505,  505,  505,  506,  506,  506,
      506,  506,  506,  506,  506,  507,  507,  507,  507,  507,
      507,  507,  507,  508,  508,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  510,
      510,  510,  510,  510,  510,  510,  510,  511,  511,  511,
      511,  511,  511,  511,  511,  512,  512,  512,  512,  512,
      512,  512,  512,  513,  513,  513,  513,  513,  513,  513,
      513,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  515,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,

      517,  517,  517,  518,  518,  518,  518,  518,  518,  518,
      518,  519,  519,  519,  519,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  521,  521,  521,
      521,  521,  521,  521,  521,  522,  522,  522,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  524,  524,  524,  524,  524,  524,  524,  524,  525,
      525,  525,  525,  525,  525,  525,  525,  526,  526,  526,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  527,  528,  528,  528,  528,  528,  528,  528,
      528,  529,  529,  529,  529,  529,  529,  529,  529,  530,

      530,  530,  530,  530,  530,  530,  530,  531,  531,  531,
      531,  531,  531,  531,  531,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  533,  533,  533,  533,  533,  533,
      533,  534,  534,  534,  534,  534,  534,  534,  534,  535,
      535,  535,  535,  535,  535,  535,  535,  536,  536,  536,
      536,  536,  536,  536,  536,  537,  537,  537,  537,  537,
      537,  537,  537,  538,  538,  538,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  540,  540,  540,  541,  541,  541,
      541,  541,  541,  541,  541,  542,  542,  542,  542,  542,

      542,  542,  542,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  545,
      545,  545,  545,  545,  545,  545,  545,  546,  546,  546,
      546,  546,  546,  546,  546,  547,  547,  547,  547,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  548,  548,
      548,  549,  549,  549,  549,  549,  549,  549,  549,  550,
      550,  550,  550,  550,  550,  550,  550,  551,  551,  551,
      551,  551,  551,  551,  551,  552,  552,  552,  552,  552,
      552,  552,  552,  553,  553,  553,  553,  553,  553,  553,
      553,  554,  554,  554,  554,  554,  554,  554,  554,  555,

      555,  555,  555,  555,  555,  555,  555,  556,  556,  556,
      556,  556,  556,  556,  556,  557,  557,  557,  557,  557,
      557,  557,  557,  558,  558,  558,  558,  558,  558,  558,
      558,  559,  559,  559,  559,  559,  559,  559,  559,  560,
      560,  560,  560,  560,  560,  560,  560,  561,  561,  561,
      561,  561,  561,  561,  561,  562,  562,  562,  562,  562,
      562,  562,  562,  563,  563,  563,  563,  563,  563,  563,
      563,  564,  564,  564,  564,  564,  564,  564,  564,  565,
      565,  565,  565,  565,  565,  565,  565,  566,  566,  566,
      566,  566,  566,  566,  566,  567,  567,  567,  567,  567,

      567,  567,  567,  568,  568,  568,  568,  568,  568,  568,
      568,  569,  569,  569,  569,  569,  569,  569,  569,  570,
      570,  570,  570,  570,  570,  570,  570,  571,  571,  571,
      571,  571,  571,  571,  571,  572,  572,  572,  572,  572,
      572,  572,  572,  573,  573,  573,  573,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  574,  574,  574,  575,
      575,  575,  575,  575,  575,  575,  575,  576,  576,  576,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,
      577,  577,  577,  578,  578,  578,  578,  578,  578,  578,
      578,  579,  579,  579,  579,  579,  579,  579,  579,  580,

      580,  580,  580,  580,  580,  580,  580,  581,  581,  581,
      581,  581,  581,  581,  581,  582,  582,  582,  582,  582,
      582,  582,  582,  583,  583,  583,  583,  583,  583,  583,
      583,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      585,  585,  585,  585,  585,  585,  585,  586,  586,  586,
      586,  586,  586,  586,  586,  587,  587,  587,  587,  587,
      587,  587,  587,  588,  588,  588,  588,  588,  588,  588,
      588,  589,  589,  589,  589,  589,  589,  589,  589,  590,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591,  591,  592,  592,  592,  592,  592,

      592,  592,  592,  593,  593,  593,  593,  593,  593,  593,
      593,  594,  594,  594,  594,  594,  594,  594,  594,  595,
      595,  595,  595,  595,  595,  595,  595,  596,  596,  596,
      596,  596,  596,  596,  596,  597,  597,  597,  597,  597,
      597,  597,  597,  598,  598,  598,  598,  598,  598,  598,
      598,  599,  599,  599,  599,  599,  599,  599,  599,  600,
      600,  600,  600,  600,  600,  600,  600,  601,  601,  601,
      601,  601,  601,  601,  601,  602,  602,  602,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  604,  604,  604,  604,  604,  604,  604,  604,  605,

      605,  605,  605,  605,  605,  605,  605,  606,  606,  606,
      606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  609,  609,  609,  609,  609,  609,  609,  609,  610,
      610,  610,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  612,  613,  613,  613,  613,  613,  613,  613,
      613,  614,  614,  614,  614,  614,  614,  614,  614,  615,
      615,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  616,  616,  616,  617,  617,  617,  617,  617,

      617,  617,  617,  618,  618,  618,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  619,  619,  619,  620,
      620,  620,  620,  620,  620,  620,  620,  621,  621,  621,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      622,  622,  622,  623,  623,  623,  623,  623,  623,  623,
      623,  624,  624,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  628,  628,  628,  628,  628,  628,
      628,  629,  629,  629,  629,  629,  629,  629,  629,  630,

      630,  630,  630,  630,  630,  630,  630,  631,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,
      632,  632,  632,  633,  633,  633,  633,  633,  633,  633,
      633,  634,  634,  634,  634,  634,  634,  634,  634,  635,
      635,  635,  635,  635,  635,  635,  635,  636,  636,  636,
      636,  636,  636,  636,  636,  637,  637,  637,  637,  637,
      637,  637,  637,  638,  638,  638,  638,  638,  638,  638,
      638,  639,  639,  639,  639,  639,  639,  639,  639,  640,
      640,  640,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  641,  641,  641,  641,  642,  642,  642,  642,  642,

      642,  642,  642,  643,  643,  643,  643,  643,  643,  643,
      643,  644,  644,  644,  644,  644,  644,  644,  644,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  647,  647,  647,  647,  647,
      647,  647,  647,  648,  648,  648,  648,  648,  648,  648,
      648,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  652,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  654,  654,  654,  655,

      655,  655,  655,  655,  655,  655,  655,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  663,  663,  663,  663,  663,  663,  663,
      663,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      665,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  666,  666,  666,  667,  667,  667,  667,  667,

      667,  667,  667,  668,  668,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669,  669,  670,
      670,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672,  672,  673,  673,  673,  673,  673,  673,  673,
      673,  674,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  675,  675,  675,  675,  676,  676,  676,
      676,  676,  676,  676,  676,  677,  677,  677,  677,  677,
      677,  677,  677,  678,  678,  678,  678,  678,  678,  678,
      678,  679,  679,  679,  679,  679,  679,  679,  679,  680,

      680,  680,  680,  680,  680,  680,  680,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  684,  684,  684,  684,  684,  684,  684,  684,  685,
      685,  685,  685,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  686,  686,  686,  687,  687,  687,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  691,  691,  691,  692,  692,  692,  692,  692,

      692,  692,  692,  693,  693,  693,  693,  693,  693,  693,
      693,  694,  694,  694,  694,  694,  694,  694,  694,  695,
      695,  695,  695,  695,  695,  695,  695,  696,  696,  696,
      696,  696,  696,  696,  696,  697,  697,  697,  697,  697,
      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  699,  699,  699,  700,
      700,  700,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701,  701,  702,  702,  702,  702,  702,
      702,  702,  702,  703,  703,  703,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  704,  705,

      705,  705,  705,  705,  705,  705,  705,  706,  706,  706,
      706,  706,  706,  706,  706,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  708,  708,  708,  708,  708,  708,
      708,  709,  709,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  713,  713,  713,  713,  713,  713,  713,
      713,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      715,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  717,  717,  717,  717,  717,

      717,  717,  717,  718,  718,  718,  718,  718,  718,  718,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  720,
      720,  720,  720,  720,  720,  720,  720,  721,  721,  721,
      721,  721,  721,  721,  721,  722,  722,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
      723,  724,  724,  724,  724,  724,  724,  724,  724,  725,
      725,  725,  725,  725,  725,  725,  725,  726,  726,  726,
      726,  726,  726,  726,  726,  727,  727,  727,  727,  727,
      727,  727,  727,  728,  728,  728,  728,  728,  728,  728,
      728,  729,  729,  729,  729,  729,  729,  729,  729,  730,

      730,  730,  730,  730,  730,  730,  730,  731,  731,  731,
      731,  731,  731,  731,  731,  732,  732,  732,  732,  732,
      732,  732,  732,  733,  733,  733,  733,  733,  733,  733,
      733,  734,  734,  734,  734,  734,  734,  734,  734,  735,
      735,  735,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  736,  736,  736,  737,  737,  737,  737,  737,
      737,  737,  737,  738,  738,  738,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  739,  739,  739,  740,
      740,  740,  740,  740,  740,  740,  740,  741,  741,  741,
      741,  741,  741,  741,  741,  742,  742,  742,  742,  742,

      742,  742,  742,  743,  743,  743,  743,  743,  743,  743,
      743,  744,  744,  744,  744,  744,  744,  744,  744,  745,
      745,  745,  745,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  746,  746,  746,  747,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
      748,  749,  749,  749,  749,  749,  749,  749,  749,  750,
      750,  750,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  754,  754,  755,

      755,  755,  755,  755,  755,  755,  755,  756,  756,  756,
      756,  756,  756,  756,  756,  757,  757,  757,  757,  757,
      757,  757,  757,  758,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  760,
      760,  760,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  764,  764,  764,  765,
      765,  765,  765,  765,  765,  765,  765,  766,  766,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,

      767,  767,  767,  768,  768,  768,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  769,  769,  769,  769,  770,
      770,  770,  770,  770,  770,  770,  770,  771,  771,  771,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  773,  773,  773,  773,  773,
      773,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  776,    3,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_chk[4821] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   15,   15,   16,   16,   20,  254,
       20,   20,   22,   28,   22,   23,   23,   23,   23,   23,
       22,   38,   48,   38,   38,   41,   41,   50,   50,   50,
      231,   48,  189,  189,  189,  306,  306,  306,  101,   74,
       16,   21,   43,   21,   21,   21,   21,   21,   28,   42,
        3,    0,   21,    0,    0,    0,    0,   38,    0,    0,

        0,   21,  778,  778,  778,  778,  779,  779,  779,  779,
      780,  780,  780,  780,  781,  781,  781,  781,  782,  782,
      782,  782,  783,  783,  783,  783,  783,  783,  783,  783,
      784,  784,  785,  785,  785,    0,    0,    0,  785,  786,
      786,  786,  786,  787,  787,  787,  787,  788,  788,  788,
      788,  789,  789,  789,  789,  790,  790,  790,  790,  791,
      791,  791,  791,  792,  792,  792,  792,  793,  793,  793,
      793,  794,  794,  794,  794,  795,  795,  795,  795,  796,
      796,  796,  796,  797,  797,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  799,  799,  799,  799,  800,

      800,  800,  800,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  802,  802,  802,  803,  803,  803,  803,  804,
      804,  804,  804,  805,  805,  805,  805,  806,  806,  806,
      806,  807,  807,  807,  807,  808,  808,  808,  808,  809,
      809,  809,  809,  810,  810,  810,  810,  811,  811,  811,
      811,  812,  812,  812,  812,  813,  813,  813,  813,  814,
      814,  814,  814,  815,  815,  815,  815,  816,  816,  816,
      816,  817,  817,  817,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  821,  821,  821,  821,  822,

      822,  822,  822,  823,  823,  823,  823,  824,  824,  824,
      824,  825,  825,  826,  826,  827,  827,  827,  827,  827,
      827,  827,  827,  828,  828,  828,  828,  829,  829,  829,
      829,  830,  830,  830,  830,  831,  831,  831,  831,  832,
      832,  832,  832,  833,  833,  833,  833,  834,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  836,
      836,  836,  836,  837,  837,  837,  837,  838,  838,  838,
      838,  839,  839,  839,  839,  840,  840,  840,  840,  841,
      841,  841,  841,  842,  842,  842,  842,  843,  843,  843,
      843,  843,  843,  843,  843,  844,  844,  844,  844,  845,

      845,  845,  845,  845,  845,  845,  845,  846,  846,  846,
      846,  847,  847,  847,  847,  848,  848,  848,  848,  848,
      848,  848,  848,  849,  849,  849,  849,  850,  850,  850,
      850,  851,  851,  851,  851,  851,  851,  851,  851,  852,
      852,  852,  852,  852,  852,  852,  852,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  855,
      855,  855,  855,  856,  856,  856,  856,  857,  857,  857,
      857,  858,  858,  858,  858,  859,  859,  859,  859,  860,
      860,  860,  860,  860,  860,  860,  860,  861,  861,  861,
      861,  862,  862,  862,  862,  863,  863,  863,  863,  864,

      864,  864,  864,  865,  865,  865,  865,  866,  866,  866,
      866,  867,  867,  867,  867,  868,  868,  868,  868,  869,
      869,  869,  869,  869,  869,  869,  869,  870,  870,  870,
      870,  871,  871,  871,  871,  871,  871,  871,  871,  872,
      872,  872,  872,  873,  873,  873,  873,  874,  874,  874,
      874,  875,  875,  875,  875,  875,  875,  875,  875,  876,
      876,  876,  876,  877,  877,  877,  877,  878,  878,  878,
      878,  878,  878,  878,  878,  879,  879,  879,  879,  879,
      879,  879,  879,  880,  880,  880,  880,  880,  880,  880,
      880,  881,  881,  881,  881,  882,  882,  882,  882,  883,

      883,  883,  883,  884,  884,  884,  884,  885,  885,  885,
      885,  886,  886,  886,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  888,  888,  888,  888,  889,  889,  889,
      889,  890,  890,  890,  890,  891,  891,  891,  891,  892,
      892,  892,  892,  893,  893,  893,  893,  894,  894,  894,
      894,  895,  895,  895,  895,  895,  895,  895,  895,  896,
      896,  896,  896,  897,  897,  897,  897,  897,  897,  897,
      897,  898,  898,  898,  898,  899,  899,  899,  899,  900,
      900,  900,  900,  901,  901,  901,  901,  901,  901,  901,
      901,  902,  902,  902,  902,  903,  903,  903,  903,  904,

      904,  904,  904,  904,  904,  904,  904,  905,  905,  905,
      905,  905,  905,  905,  905,  906,  906,  906,  906,  906,
      906,  906,  906,  907,  907,  907,  907,  908,  908,  908,
      908,  909,  909,  909,  909,  910,  910,  910,  910,  911,
      911,  911,  911,  912,  912,  912,  912,  913,  913,  913,
      913,  913,  913,  913,  913,  914,  914,  914,  914,  915,
      915,  915,  915,  916,  916,  916,  916,  917,  917,  917,
      917,  918,  918,  918,  918,  919,  919,  919,  919,  920,
      920,  920,  920,  920,  920,  920,  920,  921,  921,  921,
      921,  922,  922,  922,  922,  922,  922,  922,  922,  923,

      923,  923,  923,  924,  924,  924,  924,  925,  925,  925,
      925,  926,  926,  926,  926,  926,  926,  926,  926,  927,
      927,  927,  927,  928,  928,  928,  928,  929,  929,  929,
      929,  929,  929,  929,  929,  930,  930,  930,  930,  930,
      930,  930,  930,  931,  931,  931,  931,  931,  931,  931,
      931,  932,  932,  932,  932,  933,  933,  933,  933,  934,
      934,  934,  934,  935,  935,  935,  935,  936,  936,  936,
      936,  937,  937,  937,  937,  937,  937,  937,  937,  938,
      938,  938,  938,  939,  939,  939,  939,  940,  940,  940,
      940,  941,  941,  941,  941,  942,  942,  942,  942,  943,

      943,  943,  943,  944,  944,  944,  944,  944,  944,  944,
      944,  945,  945,  945,  945,  946,  946,  946,  946,  946,
      946,  946,  946,  947,  947,  947,  947,  948,  948,  948,
      948,  949,  949,  949,  949,  950,  950,  950,  950,  950,
      950,  950,  950,  951,  951,  951,  951,  951,  951,  951,
      951,  952,  952,  952,  952,  952,  952,  952,  952,  953,
      953,  953,  953,  953,  953,  953,  953,  954,  954,  954,
      954,  955,  955,  955,  955,  956,  956,  956,  956,  957,
      957,  957,  957,  958,  958,  958,  958,  959,  959,  959,
      959,  960,  960,  960,  960,  960,  960,  960,  960,  961,

      961,  961,  961,  962,  962,  962,  962,  963,  963,  963,
      963,  964,  964,  964,  964,  965,  965,  965,  965,  966,
      966,  966,  966,  967,  967,  967,  967,  967,  967,  967,
      967,  968,  968,  968,  968,  969,  969,  969,  969,  969,
      969,  969,  969,  970,  970,  970,  970,  971,  971,  971,
      971,  971,  971,  971,  971,  972,  972,  972,  972,  972,
      972,  972,  972,  973,  973,  973,  973,  973,  973,  973,
      973,  974,  974,  974,  974,  974,  974,  974,  974,  975,
      975,  975,  975,  975,  975,  975,  975,  976,  976,  976,
      976,  977,  977,  977,  977,  978,  978,  978,  978,  979,

      979,  979,  979,  980,  980,  980,  980,  981,  981,  981,
      981,  982,  982,  982,  982,  982,  982,  982,  982,  983,
      983,  983,  983,  984,  984,  984,  984,  985,  985,  985,
      985,  986,  986,  986,  986,  987,  987,  987,  987,  988,
      988,  988,  988,  989,  989,  989,  989,  989,  989,  989,
      989,  990,  990,  990,  990,  991,  991,  991,  991,  991,
      991,  991,  991,  992,  992,  992,  992,  993,  993,  993,
      993,  993,  993,  993,  993,  994,  994,  994,  994,  994,
      994,  994,  994,  995,  995,  995,  995,  995,  995,  995,
      995,  996,  996,  996,  996,  996,  996,  996,  996,  997,

      997,  997,  997,  997,  997,  997,  997,  998,  998,  998,
      998,  999,  999,  999,  999, 1000, 1000, 1000, 1000, 1001,
     1001, 1001, 1001, 1002, 1002, 1002, 1002, 1003, 1003, 1003,
     1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005, 1005, 1005, 1006, 1006, 1006, 1006, 1007, 1007, 1007,
     1007, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009, 1010,
     1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1012, 1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1014, 1014, 1014, 1014, 1015, 1015, 1015,
     1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017,

     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1023,
     1023, 1023, 1023, 1024, 1024, 1024, 1024, 1025, 1025, 1025,
     1025, 1026, 1026, 1026, 1026, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1028, 1028, 1028, 1028, 1029, 1029, 1029,
     1029, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1032,
     1032, 1032, 1032, 1033, 1033, 1033, 1033, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1036,

     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037,
     1037, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1045,
     1045, 1045, 1045, 1046, 1046, 1046, 1046, 1047, 1047, 1047,
     1047, 1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1050, 1050, 1050, 1050, 1051, 1051, 1051,
     1051, 1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1054,

     1054, 1054, 1054, 1055, 1055, 1055, 1055, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059, 1059, 1059,
     1059, 1060, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1067,
     1067, 1067, 1067, 1068, 1068, 1068, 1068, 1069, 1069, 1069,
     1069, 1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
     1073, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1076,
     1076, 1076, 1076, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081, 1081,
     1081, 1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1088, 1089,

     1089, 1089, 1089, 1090, 1090, 1090, 1090, 1091, 1091, 1091,
     1091, 1092, 1092, 1092, 1092, 1093, 1093, 1093, 1093, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1095, 1095, 1095,
     1095, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1098,
     1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1107, 1107, 1107, 1107, 1108, 1108, 1108,
     1108, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1110, 1111,
     1111, 1111, 1111, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1113, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1115,
     1115, 1115, 1115, 1116, 1116, 1116, 1116, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123, 1123,

     1123, 1123, 1123, 1124, 1124, 1124, 1124, 1125, 1125, 1125,
     1125, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127,
     1127, 1127, 1127, 1128, 1128, 1128, 1128, 1129, 1129, 1129,
     1129, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1140, 1140, 1140, 1140, 1141, 1141, 1141,
     1141, 1142, 1142, 1142, 1142, 1143, 1143, 1143, 1143, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150,
     1150, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1152,
     1152, 1152, 1152, 1153, 1153, 1153, 1153, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,

     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231,

     1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1269,

     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,

     1281, 1281, 1281, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319,

     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331,

     1331, 1331, 1331, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344,

     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381, 1381, 1381,

     1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394,

     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406,

     1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444,

     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456,

     1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469,

     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481,

     1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_rule_linenum[40] =
    {   0,
       92,  102,  110,  118,  126,  134,  142,  150,  159,  167,
      175,  183,  191,  199,  207,  215,  223,  231,  239,  247,
      255,  263,  273,  281,  289,  297,  305,  313,  321,  330,
      338,  347,  355,  363,  371,  379,  387,  395,  404
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "protocol.l"
#define INITIAL 0
/* scanner for a toy Pascal-like language */
#line 4 "protocol.l"
/* need this for the call to atof() below */
#include "StdAfx.h"
#include <stdio.h>
#include <math.h>
#include "protocol.h"
#include "bixolon.h"
#include "state_machines.h"

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

char* bxtext;
long* bxleng;
char* qprint;
long* qpleng;
Quorion::Bixolon bix;
//Quorion::Printer *cmds;
Quorion::SM_Inicial *smStart;

/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
#define YY_NO_UNPUT 1
#line 1836 "protocol.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 90 "protocol.l"


#line 1966 "protocol.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 778 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 777 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 40 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 40 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfDatosDelCajero(yytext, qprint);
			
			smStart->Check(Quorion::TKN_CONF_DATOS_DEL_CAJERO,yytext,yyleng);		
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 102 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfNombresFormasDePagos(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_NOMBRES_FORMAS_DE_PAGO,yytext,yyleng);	
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfHora(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_HORA,yytext,yyleng);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 118 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfFecha(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_FECHA,yytext,yyleng);
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfDelIVA(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_DEL_IVA,yytext,yyleng);	
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 134 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfDelIVAMemoriaFiscal(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_DEL_IVA_MEMORIA_FISCAL,yytext,yyleng);	
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 142 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfEncabezado(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_ENCABEZADO,yytext,yyleng);	
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 150 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ConfPieDeFactura(yytext, qprint);
			smStart->Check(Quorion::TKN_CONF_PIE_DE_FACTURA,yytext,yyleng);	
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 159 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.CajeroInicio(yytext, qprint);
			smStart->Check(Quorion::TKN_CAJERO_INICIO,yytext,yyleng);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 167 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.CajeroFin(yytext, qprint);
			smStart->Check(Quorion::TKN_CAJERO_FIN,yytext,yyleng);
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 175 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DatosDelCliente(yytext, qprint);
			smStart->Check(Quorion::TKN_DATOS_CLIENTE,yytext,yyleng);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 183 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactRegistroDeProducto(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_REGISTRO_PRODUCTO,yytext,yyleng);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 191 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactDescripcionDeProducto(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_DESCRIPCION_PRODUCTO,yytext,yyleng);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactCorreccion(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_CORRECCION,yytext,yyleng);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 207 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactSubtotal(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_SUBTOTAL,yytext,yyleng);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 215 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactRecargoODescuento(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_RECARGO_O_DESCUENTO,yytext,yyleng);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 223 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactAnulacionITEM(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_ANULACION_ITEM,yytext,yyleng);
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 231 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactAnulacionFactura(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_ANULACION_FACTURA,yytext,yyleng);
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 239 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactPagoDirecto(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_PAGO_DIRECTO,yytext,yyleng);
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 247 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactPagoParcial(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_PAGO_PARCIAL,yytext,yyleng);
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 255 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.FactCodigoDeBarra(yytext, qprint);
			smStart->Check(Quorion::TKN_FACT_CODIGO_DE_BARRA,yytext,yyleng);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 263 "protocol.l"
{			
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			/* Se coloco los caracteres [!|"|#| ] ya que el sistema adm. 
			   VALERY lo utiliza como comando para identificar el tipo de tasa del producto
			*/
			*qpleng = bix.NCRegistroProducto(yytext, qprint);
			smStart->Check(Quorion::TKN_NC_REGISTRO_PRODUCTO,yytext,yyleng);
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 273 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.NCAnulacionITEM(yytext, qprint);
			smStart->Check(Quorion::TKN_NC_ANULACION_ITEM,yytext,yyleng);
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 281 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.NCCierreDevolucion(yytext, qprint);
			smStart->Check(Quorion::TKN_NC_CIERRE_DEVOLUCION,yytext,yyleng);
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 289 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//						
			*qpleng = bix.DNFTexto(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_TEXTO,yytext,yyleng);
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 297 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNFAperturaGaveta(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_APERTURA_GAVETA,yytext,yyleng);
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 305 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNF_PO_RA(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_PO_RA,yytext,yyleng);
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 313 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNFFinalizarPORA(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_FINALIZAR_PO_RA,yytext,yyleng);
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 321 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DNFPrintValorConf(yytext, qprint);
			smStart->Check(Quorion::TKN_DNF_PRINT_VALOR_CONF,yytext,yyleng);
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 330 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.DisplayMensaje(yytext, qprint);
			smStart->Check(Quorion::TKN_DISPLAY_MENSAJE,yytext,yyleng);
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 338 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.Status(yytext, qprint);
			smStart->Check(Quorion::TKN_STATUS,yytext,yyleng);
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 347 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteX(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_X,yytext,yyleng);
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 355 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteZ(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_Z,yytext,yyleng);
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 363 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteMFiscalFecha(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_MFISCAL_FECHA,yytext,yyleng);
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 371 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReporteMFiscalNumero(yytext, qprint);
			smStart->Check(Quorion::TKN_REPORTE_MFISCAL_NUMERO,yytext,yyleng);
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 379 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReimpresionDeDocPorNumero(yytext, qprint);
			smStart->Check(Quorion::TKN_REIMPRESION_DOC_POR_NUMERO,yytext,yyleng);
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 387 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.ReimpresionDeDocPorFecha(yytext, qprint);
			smStart->Check(Quorion::TKN_REIMPRESION_DOC_POR_FECHA,yytext,yyleng);
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 395 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//
			*qpleng = bix.PrintEdoMemoriaAuditoria(yytext, qprint);
			smStart->Check(Quorion::TKN_PRINT_EDO_MEMORIA_AUDITORIA,yytext,yyleng);
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 404 "protocol.l"
{
			*bxleng = yyleng;
			strncpy(bxtext, yytext, yyleng);
			//						
			printf( "Caracter No Reconocido: %s\n", yytext );
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 411 "protocol.l"
ECHO;
	YY_BREAK
#line 2495 "protocol.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 778 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 778 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 777);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 411 "protocol.l"


int Bixolonwrap()
{	
	return 1;
}

namespace Quorion {

	Protocol::Protocol(Printer *sm_print,::istream* in,
				::ostream* out)
			: BixolonFlexLexer(in, out)
	{
		//cmds = sm_print;
		//_printer = cmds;
		_printer = sm_print;
		smStart = new Quorion::SM_Inicial(sm_print);
		_smStart = smStart;

		_bxtext = (char*)malloc(1024*sizeof(char));
		memset(_bxtext, 0, 1024);
		bxtext = _bxtext;

		bxleng = &_bxleng;
		_bxleng = 0;

		_qprint = (char*)malloc(1024*sizeof(char));
		memset(_qprint, 0, 1024);
		qprint = _qprint;

		qpleng = &_qpleng;
		_qpleng = 0;
		//printf("Protocol\n");
	}

	Protocol::~Protocol()
	{
		free(_bxtext);
		free(_qprint);
		free(_smStart);
		//printf("free Protocol\n");
	}

	void Protocol::set_debug(bool b)
	{
		yy_flex_debug = b;
	}

	char* Protocol::YYText()
	{
		return _bxtext;
	}

	long Protocol::YYLeng()
	{
		return _bxleng;
	}

	char* Protocol::QPrint()
	{
		return _qprint;
	}

	long Protocol::QPLeng()
	{
		return _qpleng;
	}

	int Protocol::yywrap()
	{
		return 1;
	}

	int Protocol::QError()
	{
		return _printer->fncGetQError();
	}

	int Protocol::BStatus()
	{
		return _printer->fncGetBStatus();
	}
}
/*
int main(int argc, char** argv)
{	
	//++argv, --argc;  // skip over program name
	//if ( argc > 0 )
	//	yyin = fopen( argv[0], "r" );
	//else
	//	yyin = stdin;     
	//yylex();
	
	//yyFlexLexer Lexer;
	//Lexer.yylex();
	return 0;
}
*/
